{"ast":null,"code":"import { requester } from '../../infrastructure';\nimport { REMOVE_COMMENT_BEGIN, REMOVE_COMMENT_SUCCESS, REMOVE_COMMENT_ERROR, ADDLIKE_COMMENT_SUCCESS, ADDLIKE_COMMENT_BEGIN, ADDLIKE_COMMENT_ERROR, CREATE_COMMENT_SUCCESS, CREATE_COMMENT_BEGIN, CREATE_COMMENT_ERROR } from './actionTypes';\nimport { fetchAllPostsAction } from './postActions';\n\n// createComment\nconst createCommentSuccess = response => {\n  return {\n    type: CREATE_COMMENT_SUCCESS,\n    payload: response\n  };\n};\nconst createCommentBegin = () => {\n  return {\n    type: CREATE_COMMENT_BEGIN\n  };\n};\nconst createCommentError = (error, message, status, path) => {\n  return {\n    type: CREATE_COMMENT_ERROR,\n    error,\n    message,\n    status,\n    path\n  };\n};\nconst createCommentAction = (postId, loggedInUserId, timelineUserId, content, imageUrl) => {\n  const requestBody = {\n    postId,\n    loggedInUserId,\n    timelineUserId,\n    content,\n    imageUrl\n  };\n  return dispatch => {\n    dispatch(createCommentBegin());\n    return requester.post('/comment/create', requestBody, response => {\n      if (response.error) {\n        const {\n          error,\n          message,\n          status,\n          path\n        } = response;\n        dispatch(createCommentError(error, message, status, path));\n      } else {\n        dispatch(createCommentSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(err => {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(createCommentError('', `Error: ${err.message}`, err.status, ''));\n    });\n  };\n};\n\n// removeComment\nconst removeCommentSuccess = response => {\n  return {\n    type: REMOVE_COMMENT_SUCCESS,\n    payload: response\n  };\n};\nconst removeCommentBegin = () => {\n  return {\n    type: REMOVE_COMMENT_BEGIN\n  };\n};\nconst removeCommentError = (error, message, status, path) => {\n  return {\n    type: REMOVE_COMMENT_ERROR,\n    error,\n    message,\n    status,\n    path\n  };\n};\nconst removeCommentAction = (loggedInUserId, commentToRemoveId, timelineUserId) => {\n  const requestBody = {\n    loggedInUserId,\n    commentToRemoveId\n  };\n  return dispatch => {\n    dispatch(removeCommentBegin());\n    return requester.post('/comment/remove', requestBody, response => {\n      if (response.error) {\n        const {\n          error,\n          message,\n          status,\n          path\n        } = response;\n        dispatch(removeCommentError(error, message, status, path));\n      } else {\n        dispatch(removeCommentSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(err => {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(removeCommentError('', `Error: ${err.message}`, err.status, ''));\n    });\n  };\n};\n\n// addLike\nconst addLikeCommentSuccess = response => {\n  return {\n    type: ADDLIKE_COMMENT_SUCCESS,\n    payload: response\n  };\n};\nconst addLikeCommentBegin = () => {\n  return {\n    type: ADDLIKE_COMMENT_BEGIN\n  };\n};\nconst addLikeCommentError = (error, message, status, path) => {\n  return {\n    type: ADDLIKE_COMMENT_ERROR,\n    error,\n    message,\n    status,\n    path\n  };\n};\nconst addLikeCommentAction = (loggedInUserId, commentId, timelineUserId) => {\n  const requestBody = {\n    commentId,\n    loggedInUserId\n  };\n  return dispatch => {\n    dispatch(addLikeCommentBegin());\n    return requester.post('/like/comment', requestBody, response => {\n      if (response.error) {\n        const {\n          error,\n          message,\n          status,\n          path\n        } = response;\n        dispatch(addLikeCommentError(error, message, status, path));\n      } else {\n        dispatch(addLikeCommentSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(err => {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(addLikeCommentError('', `Error: ${err.message}`, err.status, ''));\n    });\n  };\n};\nexport { createCommentAction, removeCommentAction, addLikeCommentAction };","map":{"version":3,"names":["requester","REMOVE_COMMENT_BEGIN","REMOVE_COMMENT_SUCCESS","REMOVE_COMMENT_ERROR","ADDLIKE_COMMENT_SUCCESS","ADDLIKE_COMMENT_BEGIN","ADDLIKE_COMMENT_ERROR","CREATE_COMMENT_SUCCESS","CREATE_COMMENT_BEGIN","CREATE_COMMENT_ERROR","fetchAllPostsAction","createCommentSuccess","response","type","payload","createCommentBegin","createCommentError","error","message","status","path","createCommentAction","postId","loggedInUserId","timelineUserId","content","imageUrl","requestBody","dispatch","post","catch","err","localStorage","clear","removeCommentSuccess","removeCommentBegin","removeCommentError","removeCommentAction","commentToRemoveId","addLikeCommentSuccess","addLikeCommentBegin","addLikeCommentError","addLikeCommentAction","commentId"],"sources":["C:/Users/Administrator/Documents/0011_Final_PROJECT/Alumni-Networking-Platform/Client/src/store/actions/commentActions.js"],"sourcesContent":["import { requester } from '../../infrastructure';\r\nimport {\r\n    REMOVE_COMMENT_BEGIN, REMOVE_COMMENT_SUCCESS, REMOVE_COMMENT_ERROR,\r\n    ADDLIKE_COMMENT_SUCCESS, ADDLIKE_COMMENT_BEGIN, ADDLIKE_COMMENT_ERROR,\r\n    CREATE_COMMENT_SUCCESS, CREATE_COMMENT_BEGIN, CREATE_COMMENT_ERROR,\r\n} from './actionTypes';\r\n\r\nimport { fetchAllPostsAction } from './postActions'\r\n\r\n// createComment\r\nconst createCommentSuccess = (response) => {\r\n    return {\r\n        type: CREATE_COMMENT_SUCCESS,\r\n        payload: response\r\n    }\r\n}\r\n\r\nconst createCommentBegin = () => {\r\n    return {\r\n        type: CREATE_COMMENT_BEGIN,\r\n    }\r\n}\r\n\r\nconst createCommentError = (error, message, status, path) => {\r\n    return {\r\n        type: CREATE_COMMENT_ERROR,\r\n        error,\r\n        message,\r\n        status,\r\n        path,\r\n    }\r\n}\r\n\r\nconst createCommentAction = (postId, loggedInUserId, timelineUserId, content, imageUrl) => {\r\n    const requestBody = { postId, loggedInUserId, timelineUserId, content, imageUrl }\r\n    return (dispatch) => {\r\n        dispatch(createCommentBegin())\r\n        return requester.post('/comment/create', requestBody, (response) => {\r\n            if (response.error) {\r\n                const { error, message, status, path } = response;\r\n                dispatch(createCommentError(error, message, status, path));\r\n            } else {\r\n                dispatch(createCommentSuccess(response));\r\n                dispatch(fetchAllPostsAction(timelineUserId))\r\n            }\r\n        }).catch(err => {\r\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\r\n                localStorage.clear();\r\n            }\r\n            dispatch(createCommentError('', `Error: ${err.message}`, err.status, ''));\r\n        })\r\n    }\r\n}\r\n\r\n// removeComment\r\nconst removeCommentSuccess = (response) => {\r\n    return {\r\n        type: REMOVE_COMMENT_SUCCESS,\r\n        payload: response\r\n    }\r\n}\r\n\r\nconst removeCommentBegin = () => {\r\n    return {\r\n        type: REMOVE_COMMENT_BEGIN,\r\n    }\r\n}\r\n\r\nconst removeCommentError = (error, message, status, path) => {\r\n    return {\r\n        type: REMOVE_COMMENT_ERROR,\r\n        error,\r\n        message,\r\n        status,\r\n        path,\r\n    }\r\n}\r\n\r\nconst removeCommentAction = (loggedInUserId, commentToRemoveId, timelineUserId) => {\r\n    const requestBody = { loggedInUserId, commentToRemoveId }\r\n    return (dispatch) => {\r\n        dispatch(removeCommentBegin())\r\n        return requester.post('/comment/remove', requestBody, (response) => {\r\n            if (response.error) {\r\n                const { error, message, status, path } = response;\r\n                dispatch(removeCommentError(error, message, status, path));\r\n            } else {\r\n                dispatch(removeCommentSuccess(response));\r\n                dispatch(fetchAllPostsAction(timelineUserId))\r\n            }\r\n        }).catch(err => {\r\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\r\n                localStorage.clear();\r\n            }\r\n            dispatch(removeCommentError('', `Error: ${err.message}`, err.status, ''));\r\n        })\r\n    }\r\n}\r\n\r\n// addLike\r\nconst addLikeCommentSuccess = (response) => {\r\n    return {\r\n        type: ADDLIKE_COMMENT_SUCCESS,\r\n        payload: response\r\n    }\r\n}\r\n\r\nconst addLikeCommentBegin = () => {\r\n    return {\r\n        type: ADDLIKE_COMMENT_BEGIN,\r\n    }\r\n}\r\n\r\nconst addLikeCommentError = (error, message, status, path) => {\r\n    return {\r\n        type: ADDLIKE_COMMENT_ERROR,\r\n        error,\r\n        message,\r\n        status,\r\n        path,\r\n    }\r\n}\r\n\r\nconst addLikeCommentAction = (loggedInUserId, commentId, timelineUserId) => {\r\n    const requestBody = { commentId, loggedInUserId }\r\n    return (dispatch) => {\r\n        dispatch(addLikeCommentBegin())\r\n        return requester.post('/like/comment', requestBody, (response) => {\r\n            if (response.error) {\r\n                const { error, message, status, path } = response;\r\n                dispatch(addLikeCommentError(error, message, status, path));\r\n            } else {\r\n                dispatch(addLikeCommentSuccess(response));\r\n                dispatch(fetchAllPostsAction(timelineUserId))\r\n            }\r\n        }).catch(err => {\r\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\r\n                localStorage.clear();\r\n            }\r\n            dispatch(addLikeCommentError('', `Error: ${err.message}`, err.status, ''));\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport { createCommentAction, removeCommentAction, addLikeCommentAction, };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}