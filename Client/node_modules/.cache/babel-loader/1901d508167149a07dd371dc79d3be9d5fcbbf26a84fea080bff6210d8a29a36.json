{"ast":null,"code":"import { requester } from '../../infrastructure';\nimport { FETCH_ALL_LOGS_SUCCESS, FETCH_ALL_LOGS_BEGIN, FETCH_ALL_LOGS_ERROR, FINDBYUSERNAME_LOGS_SUCCESS, FINDBYUSERNAME_LOGS_BEGIN, FINDBYUSERNAME_LOGS_ERROR, CLEARBYUSERNAME_LOGS_SUCCESS, CLEARBYUSERNAME_LOGS_BEGIN, CLEARBYUSERNAME_LOGS_ERROR, CLEAR_ALL_LOGS_SUCCESS, CLEAR_ALL_LOGS_BEGIN, CLEAR_ALL_LOGS_ERROR } from './actionTypes';\n\n// fetchAllLogs\nfunction fetchAllLogsSuccess(response) {\n  return {\n    type: FETCH_ALL_LOGS_SUCCESS,\n    payload: response\n  };\n}\nfunction fetchAllLogsBegin() {\n  return {\n    type: FETCH_ALL_LOGS_BEGIN\n  };\n}\nfunction fetchAllLogsError(error, message, status, path) {\n  return {\n    type: FETCH_ALL_LOGS_ERROR,\n    error,\n    message,\n    status,\n    path\n  };\n}\nfunction fetchAllLogsAction() {\n  return dispatch => {\n    dispatch(fetchAllLogsBegin());\n    return requester.get('/logs/all', response => {\n      if (response.error) {\n        const {\n          error,\n          message,\n          status,\n          path\n        } = response;\n        dispatch(fetchAllLogsError(error, message, status, path));\n      } else {\n        // dispatch(changeAllPicturesAction(timeLineUserId));\n        dispatch(fetchAllLogsSuccess(response));\n      }\n    }).catch(err => {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(fetchAllLogsError('', `Error: ${err.message}`, err.status, ''));\n    });\n  };\n}\n;\n\n// findByUserName\nfunction findByUserNameSuccess(response, search) {\n  return {\n    type: FINDBYUSERNAME_LOGS_SUCCESS,\n    payload: response,\n    message: `Successfully loaded logs for \"${search}\".`\n  };\n}\nfunction findByUserNameBegin() {\n  return {\n    type: FINDBYUSERNAME_LOGS_BEGIN\n  };\n}\nfunction findByUserNameError(error, message, status, path) {\n  return {\n    type: FINDBYUSERNAME_LOGS_ERROR,\n    error,\n    message,\n    status,\n    path\n  };\n}\nfunction findLogsByUserNameAction(search) {\n  return dispatch => {\n    dispatch(findByUserNameBegin());\n    return requester.get('/logs/findByUserName/' + search, response => {\n      if (response.error) {\n        const {\n          error,\n          message,\n          status,\n          path\n        } = response;\n        dispatch(findByUserNameError(error, message, status, path));\n      } else {\n        dispatch(fetchAllLogsSuccess(response));\n        dispatch(findByUserNameSuccess(response, search));\n      }\n    }).catch(err => {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(findByUserNameError('', `Error: ${err.message}`, err.status, ''));\n    });\n  };\n}\n;\n\n// clearByUserName\nfunction clearByUserNameSuccess(response) {\n  return {\n    type: CLEARBYUSERNAME_LOGS_SUCCESS,\n    payload: response\n  };\n}\nfunction clearByUserNameBegin() {\n  return {\n    type: CLEARBYUSERNAME_LOGS_BEGIN\n  };\n}\nfunction clearByUserNameError(error, message, status, path) {\n  return {\n    type: CLEARBYUSERNAME_LOGS_ERROR,\n    error,\n    message,\n    status,\n    path\n  };\n}\nfunction clearLogsByUserNameAction(selected) {\n  return dispatch => {\n    dispatch(clearByUserNameBegin());\n    return requester.delete('/logs/clearByName/' + selected, {}, response => {\n      if (response.error) {\n        const {\n          error,\n          message,\n          status,\n          path\n        } = response;\n        dispatch(clearByUserNameError(error, message, status, path));\n      } else {\n        dispatch(clearByUserNameSuccess(response));\n        dispatch(fetchAllLogsAction());\n      }\n    }).catch(err => {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(clearByUserNameError('', `Error: ${err.message}`, err.status, ''));\n    });\n  };\n}\n;\n\n// clearAllLogs\nfunction clearAllLogsSuccess(response) {\n  return {\n    type: CLEAR_ALL_LOGS_SUCCESS,\n    payload: response\n  };\n}\nfunction clearAllLogsBegin() {\n  return {\n    type: CLEAR_ALL_LOGS_BEGIN\n  };\n}\nfunction clearAllLogsError(error, message, status, path) {\n  return {\n    type: CLEAR_ALL_LOGS_ERROR,\n    error,\n    message,\n    status,\n    path\n  };\n}\nfunction clearAllLogsAction() {\n  return dispatch => {\n    dispatch(clearAllLogsBegin());\n    return requester.delete('/logs/clear', {}, response => {\n      if (response.error) {\n        const {\n          error,\n          message,\n          status,\n          path\n        } = response;\n        dispatch(clearAllLogsError(error, message, status, path));\n      } else {\n        dispatch(clearAllLogsSuccess(response));\n      }\n    }).catch(err => {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(clearAllLogsError('', `Error: ${err.message}`, err.status, ''));\n    });\n  };\n}\n;\nexport { fetchAllLogsAction, findLogsByUserNameAction, clearLogsByUserNameAction, clearAllLogsAction };","map":{"version":3,"names":["requester","FETCH_ALL_LOGS_SUCCESS","FETCH_ALL_LOGS_BEGIN","FETCH_ALL_LOGS_ERROR","FINDBYUSERNAME_LOGS_SUCCESS","FINDBYUSERNAME_LOGS_BEGIN","FINDBYUSERNAME_LOGS_ERROR","CLEARBYUSERNAME_LOGS_SUCCESS","CLEARBYUSERNAME_LOGS_BEGIN","CLEARBYUSERNAME_LOGS_ERROR","CLEAR_ALL_LOGS_SUCCESS","CLEAR_ALL_LOGS_BEGIN","CLEAR_ALL_LOGS_ERROR","fetchAllLogsSuccess","response","type","payload","fetchAllLogsBegin","fetchAllLogsError","error","message","status","path","fetchAllLogsAction","dispatch","get","catch","err","localStorage","clear","findByUserNameSuccess","search","findByUserNameBegin","findByUserNameError","findLogsByUserNameAction","clearByUserNameSuccess","clearByUserNameBegin","clearByUserNameError","clearLogsByUserNameAction","selected","delete","clearAllLogsSuccess","clearAllLogsBegin","clearAllLogsError","clearAllLogsAction"],"sources":["C:/Users/rijul/Downloads/Alumni/Alumani/Client/src/store/actions/logsActions.js"],"sourcesContent":["import { requester } from '../../infrastructure';\nimport {\n    FETCH_ALL_LOGS_SUCCESS, FETCH_ALL_LOGS_BEGIN, FETCH_ALL_LOGS_ERROR,\n    FINDBYUSERNAME_LOGS_SUCCESS, FINDBYUSERNAME_LOGS_BEGIN, FINDBYUSERNAME_LOGS_ERROR,\n    CLEARBYUSERNAME_LOGS_SUCCESS, CLEARBYUSERNAME_LOGS_BEGIN, CLEARBYUSERNAME_LOGS_ERROR,\n    CLEAR_ALL_LOGS_SUCCESS, CLEAR_ALL_LOGS_BEGIN, CLEAR_ALL_LOGS_ERROR,\n} from './actionTypes';\n\n// fetchAllLogs\nfunction fetchAllLogsSuccess(response) {\n    return {\n        type: FETCH_ALL_LOGS_SUCCESS,\n        payload: response\n    }\n}\n\nfunction fetchAllLogsBegin() {\n    return {\n        type: FETCH_ALL_LOGS_BEGIN,\n    }\n}\n\nfunction fetchAllLogsError(error, message, status, path) {\n    return {\n        type: FETCH_ALL_LOGS_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nfunction fetchAllLogsAction() {\n    return (dispatch) => {\n        dispatch(fetchAllLogsBegin())\n        return requester.get('/logs/all', (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(fetchAllLogsError(error, message, status, path));\n            } else {\n                // dispatch(changeAllPicturesAction(timeLineUserId));\n                dispatch(fetchAllLogsSuccess(response));\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(fetchAllLogsError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n};\n\n// findByUserName\nfunction findByUserNameSuccess(response, search) {\n    return {\n        type: FINDBYUSERNAME_LOGS_SUCCESS,\n        payload: response,\n        message: `Successfully loaded logs for \"${search}\".`\n    }\n}\n\nfunction findByUserNameBegin() {\n    return {\n        type: FINDBYUSERNAME_LOGS_BEGIN,\n    }\n}\n\nfunction findByUserNameError(error, message, status, path) {\n    return {\n        type: FINDBYUSERNAME_LOGS_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nfunction findLogsByUserNameAction(search) {\n    return (dispatch) => {\n        dispatch(findByUserNameBegin())\n        return requester.get('/logs/findByUserName/' + search, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(findByUserNameError(error, message, status, path));\n            } else {\n                dispatch(fetchAllLogsSuccess(response));\n                dispatch(findByUserNameSuccess(response, search));\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(findByUserNameError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n};\n\n// clearByUserName\nfunction clearByUserNameSuccess(response) {\n    return {\n        type: CLEARBYUSERNAME_LOGS_SUCCESS,\n        payload: response,\n    }\n}\n\nfunction clearByUserNameBegin() {\n    return {\n        type: CLEARBYUSERNAME_LOGS_BEGIN,\n    }\n}\n\nfunction clearByUserNameError(error, message, status, path) {\n    return {\n        type: CLEARBYUSERNAME_LOGS_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nfunction clearLogsByUserNameAction(selected) {\n    return (dispatch) => {\n        dispatch(clearByUserNameBegin())\n        return requester.delete('/logs/clearByName/' + selected, {}, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(clearByUserNameError(error, message, status, path));\n            } else {\n                dispatch(clearByUserNameSuccess(response));\n                dispatch(fetchAllLogsAction());\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(clearByUserNameError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n};\n\n// clearAllLogs\nfunction clearAllLogsSuccess(response) {\n    return {\n        type: CLEAR_ALL_LOGS_SUCCESS,\n        payload: response,\n    }\n}\n\nfunction clearAllLogsBegin() {\n    return {\n        type: CLEAR_ALL_LOGS_BEGIN,\n    }\n}\n\nfunction clearAllLogsError(error, message, status, path) {\n    return {\n        type: CLEAR_ALL_LOGS_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nfunction clearAllLogsAction() {\n    return (dispatch) => {\n        dispatch(clearAllLogsBegin())\n        return requester.delete('/logs/clear', {}, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(clearAllLogsError(error, message, status, path));\n            } else {\n                dispatch(clearAllLogsSuccess(response));\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(clearAllLogsError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n};\n\nexport { fetchAllLogsAction, findLogsByUserNameAction, clearLogsByUserNameAction, clearAllLogsAction };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}