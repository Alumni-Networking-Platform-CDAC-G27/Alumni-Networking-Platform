{"ast":null,"code":"import React,{Component,Fragment}from'react';import{userService}from'../../infrastructure';import{toast}from'react-toastify';import{ToastComponent}from'../common';import TextareaAutosize from'react-autosize-textarea';import FriendChatBox from'./FriendChatBox';import FriendMessage from'./FriendMessage';import'../user/css/UserAllPage.css';import'./css/MessageBox.css';import{connect}from'react-redux';import{fetchAllChatFriendsAction,updateUserStatusAction}from'../../store/actions/userActions';import{fetchAllMessagesAction,addMessageAction,fetchAllUnreadMessagesAction}from'../../store/actions/messageActions';import Stomp from\"stompjs\";import SockJS from\"sockjs-client\";class MessageBox extends Component{constructor(props){super(props);this.initializeWebSocketConnection=()=>{const ws=new SockJS(this.serverUrl);this.stompClient=Stomp.over(ws);const headers=this.getAuthHeader();this.stompClient.connect(headers,frame=>{if(this._isMounted){this.setState({clientConnected:true});this.stompClient.subscribe(\"/user/queue/position-update\",message=>{if(message.body){const messageBody=JSON.parse(message.body);if(this._isMounted&&(messageBody.fromUserId===this.state.chatUserId||messageBody.fromUserId===userService.getUserId())){this.props.addMessage(messageBody);}if(messageBody.fromUserId!==userService.getUserId()){const formattedUserNames=userService.formatUsername(messageBody.fromUserFirstName,messageBody.fromUserLastName);toast.info(/*#__PURE__*/React.createElement(ToastComponent.infoToast,{text:`You have a new message from ${formattedUserNames}!`}),{position:toast.POSITION.TOP_RIGHT});this.props.loadAllUnreadMessages();}}});this.stompClient.subscribe(\"/chat/login\",message=>{if(message.body){const parsedBody=JSON.parse(message.body);this.changeUserOnlineStatus(parsedBody);}});this.stompClient.subscribe(\"/chat/logout\",message=>{if(message.body){const parsedBody=JSON.parse(message.body);this.changeUserOnlineStatus(parsedBody);}});}},()=>{toast.error(/*#__PURE__*/React.createElement(ToastComponent.errorToast,{text:`Lost connection to ${this.serverUrl}. Refresh the page to reconnect.`}),{position:toast.POSITION.TOP_RIGHT});//// Callback for automatically reconnecting to the server\n// setTimeout(() => {\n//     toast.error(<ToastComponent.errorToast text={`Lost connection to ${this.serverUrl}. Trying to reconnect.`} />, {\n//         position: toast.POSITION.TOP_RIGHT\n//     });\n//     this.initializeWebSocketConnection();\n// }, 10000);\n});};this.getAuthHeader=()=>{const token=localStorage.getItem(\"token\");return token&&token.length?{'Authorization':`Bearer ${token}`}:{};};this.getAllMessages=chatUserId=>{this.props.fetchAllMessages(chatUserId);};this.loadAllChatFriends=()=>{const userId=userService.getUserId();this.props.loadAllChatFriends(userId);};this.handleBlur=field=>event=>{this.setState({touched:{...this.state.touched,[field]:true}});};this.validate=content=>{return{content:content.length===0};};this.changeHeight=()=>{const userBoxHeight=this.state.userBoxHeight;if(userBoxHeight===''){this.setState({userBoxHeight:'toggle'});}else{this.setState({userBoxHeight:''});}};this.changeChatBoxHeight=()=>{const chatBoxHeight=this.state.chatBoxHeight;if(chatBoxHeight===''){this.setState({chatBoxHeight:'toggle-chat-container'});}else{this.setState({chatBoxHeight:''});}};this.changeChatBoxDisplay=()=>{const chatBoxDisplay=this.state.chatBoxDisplay;if(chatBoxDisplay===''){this.setState({chatBoxDisplay:'display-none'});}else{this.setState({chatBoxDisplay:''});}};this.showUserChatBox=(data,event)=>{const{id,firstName,lastName,profilePicUrl}=data;let chatUserNameFormatted=userService.formatUsername(firstName,lastName,18);this.setState({chatUserId:id,chatUserFirstName:firstName,chatUserLastName:lastName,chatUserNameFormatted,chatUserProfilePicUrl:profilePicUrl,shouldScrollDown:true,chatBoxDisplay:'',chatBoxHeight:'',content:''},()=>{this.getAllMessages(id);});};this.closeUserChatBox=()=>{this.setState({chatBoxDisplay:'display-none'});};this.getOnlineUserCount=()=>{let usersCount=this.props.friendsChatArr.filter(user=>{return user.online===true;});return usersCount.length;};this.state={loggedInUserId:'',chatUserId:'',chatUserFirstName:'',chatUserLastName:'',chatUserNameFormatted:'',chatUserProfilePicUrl:'',userBoxHeight:'toggle',chatBoxHeight:'',chatBoxDisplay:'display-none',content:'',shouldScrollDown:false,friendsArrLength:0,clientConnected:false,touched:{content:false}};this._isMounted=false;this.serverUrl=userService.getBaseUrl()+'/socket';this.stompClient=null;this.handleBlur=this.handleBlur.bind(this);this.onChangeHandler=this.onChangeHandler.bind(this);this.onSubmitHandler=this.onSubmitHandler.bind(this);this.showUserChatBox=this.showUserChatBox.bind(this);this.changeChatBoxDisplay=this.changeChatBoxDisplay.bind(this);this.getAllMessages=this.getAllMessages.bind(this);this.loadAllChatFriends=this.loadAllChatFriends.bind(this);}componentDidMount(){const userId=userService.getUserId();this.setState({loggedInUserId:userId});this.initializeWebSocketConnection();this.loadAllChatFriends();this._isMounted=true;}componentDidUpdate(prevProps,prevState){if(this.props.allMessagesArr!==prevProps.allMessagesArr){this.setState({content:''},()=>{if(this.state.shouldScrollDown){this.scrollDown();}else{this.setState({shouldScrollDown:true},this.scrollTop());}});}if(this.props.friendsChatArr.length!==prevProps.friendsChatArr.length){this.setState({chatBoxDisplay:'display-none'});}if(this.props.triggerMessageLoad!==prevProps.triggerMessageLoad){const userData=this.props.triggerMessageLoad;this.showUserChatBox(userData);}const errorMessage=this.getErrorMessage(prevProps,prevState);const successMessage=this.getSuccessMessage(prevProps,prevState);if(errorMessage){toast.error(/*#__PURE__*/React.createElement(ToastComponent.errorToast,{text:errorMessage}),{position:toast.POSITION.TOP_RIGHT});}else if(successMessage){toast.success(/*#__PURE__*/React.createElement(ToastComponent.successToast,{text:successMessage}),{position:toast.POSITION.TOP_RIGHT});}}componentWillUnmount(){this.stompClient.disconnect();this._isMounted=false;}getSuccessMessage(prevProps,prevState){if(!this.props.fetchAllChatFriends.hasError&&this.props.fetchAllChatFriends.message&&this.props.fetchAllChatFriends!==prevProps.fetchAllChatFriends){return this.props.fetchAllChatFriends.message;}else if(!this.props.fetchAllMessages.hasError&&this.props.fetchAllMessages.message&&this.props.fetchAllMessages!==prevProps.fetchAllMessages){return this.props.fetchAllMessages.message;}return null;}getErrorMessage(prevProps,prevState){if(this.props.fetchAllChatFriends.hasError&&prevProps.fetchAllChatFriends.error!==this.props.fetchAllChatFriends.error){return this.props.fetchAllChatFriends.message||'Server Error';}else if(this.props.fetchAllMessages.hasError&&prevProps.fetchAllMessages.error!==this.props.fetchAllMessages.error){return this.props.fetchAllMessages.message||'Server Error';}return null;}sendMessage(payload){this.stompClient.send(\"/app/message\",{},JSON.stringify(payload));this.setState({content:''});}onSubmitHandler(event){event.preventDefault();if(!this.canBeSubmitted()){return;}const{chatUserId:toUserId,content}=this.state;if(this.state.clientConnected){this.sendMessage({toUserId,content});}else{toast.error(/*#__PURE__*/React.createElement(ToastComponent.errorToast,{text:`StompClient is disconnected`}),{position:toast.POSITION.TOP_RIGHT});}}onChangeHandler(event){this.setState({[event.target.name]:event.target.value});}canBeSubmitted(){const{content}=this.state;const errors=this.validate(content);const isDisabled=Object.keys(errors).some(x=>errors[x]);return!isDisabled;}scrollToBottom(){const e=document.getElementById('chat-content');e.scrollTop=e.scrollHeight-e.getBoundingClientRect().height;}scrollTop(){const container=document.getElementById('chat-content');container.scrollTop=0;}scrollDown(){const container=document.getElementById('chat-content');container.scrollTop=container.scrollHeight;}changeUserOnlineStatus(webSocketMessage){const{userId:id,online}=webSocketMessage;this.props.updateUserStatus({id,online});}render(){if(!this.state.clientConnected){console.log('Connecting...');return/*#__PURE__*/React.createElement(\"h1\",{className:\"text-center pt-5 mt-5\"},\"Connecting...\");}const{content}=this.state;const errors=this.validate(content);const isEnabled=!Object.keys(errors).some(x=>errors[x]);const displayButon=isEnabled?'':'hidden';const loggedInUserFirstName=userService.getFirstName();const userBoxHeight=this.state.userBoxHeight;const chatBoxHeight=this.state.chatBoxHeight;const chatBoxDisplay=this.state.chatBoxDisplay;const{chatUserProfilePicUrl,chatUserNameFormatted}=this.state;const imageClassUserPick=userService.getImageSize(chatUserProfilePicUrl);const firstNameFormatted=userService.formatUsername(loggedInUserFirstName);return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(\"section\",{className:`messagebox-container ${userBoxHeight}`},/*#__PURE__*/React.createElement(\"div\",{className:\"messagebox-header\",onClick:this.changeHeight},/*#__PURE__*/React.createElement(\"div\",{className:\"messagebox-chat-icon\"},/*#__PURE__*/React.createElement(\"i\",{className:\"fas fa-location-arrow\"})),/*#__PURE__*/React.createElement(\"h4\",{className:\"chat-title\",style:{color:' #333'}},\"Chat \\u2022 \",this.getOnlineUserCount())),/*#__PURE__*/React.createElement(\"div\",{className:\"messagebox-friendsChatArr-wrapper\"},this.props.friendsChatArr.map(friend=>/*#__PURE__*/React.createElement(FriendChatBox,Object.assign({key:friend.id,showUserChatBox:this.showUserChatBox},friend))))),/*#__PURE__*/React.createElement(\"section\",{className:`chat-container ${chatBoxHeight} ${chatBoxDisplay}`,id:\"chat-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat-friend-container\",onClick:this.changeChatBoxHeight},/*#__PURE__*/React.createElement(\"div\",{className:\"chat-friend-image\"},/*#__PURE__*/React.createElement(\"img\",{className:imageClassUserPick,src:chatUserProfilePicUrl,alt:\"bender\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"chat-username-container\"},/*#__PURE__*/React.createElement(\"p\",{className:\"chat-username\"},chatUserNameFormatted))),/*#__PURE__*/React.createElement(\"div\",{className:\"close-button-container\",onClick:this.closeUserChatBox},/*#__PURE__*/React.createElement(\"div\",{className:\"btn chat-uiButtonGroup chat-fbPhotoCurationControl  chat-delete-button\"},/*#__PURE__*/React.createElement(\"i\",{className:\"fas fa-times\"}))),/*#__PURE__*/React.createElement(\"div\",{className:\"content-wrapper\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat-content\",id:\"chat-content\"},this.props.allMessagesArr.map(message=>/*#__PURE__*/React.createElement(FriendMessage,Object.assign({key:message.id},message)))),/*#__PURE__*/React.createElement(\"div\",{className:\"chat-footer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat-input-group\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat-area-container\"},/*#__PURE__*/React.createElement(\"form\",{onSubmit:this.onSubmitHandler},/*#__PURE__*/React.createElement(\"div\",{className:\"\",id:\"chat-textarea-form-group\"},/*#__PURE__*/React.createElement(TextareaAutosize,{name:\"content\",id:\"content\",className:\"chat-textarea\",value:this.state.content,onChange:this.onChangeHandler,onBlur:this.handleBlur('content'),\"aria-describedby\":\"contentHelp\",placeholder:`Type your message, ${firstNameFormatted}?`,maxRows:6})),/*#__PURE__*/React.createElement(\"div\",{className:\"text-center\"},/*#__PURE__*/React.createElement(\"button\",{disabled:!isEnabled,style:{'visibility':`${displayButon}`},type:\"submit\",className:\"btn fas fa-location-arrow App-button-primary send-btn\"})))))))));}}const mapStateToProps=state=>{return{friendsChatArr:state.fetchAllChatFriends.friendsChatArr,fetchAllChatFriends:state.fetchAllChatFriends,allMessagesArr:state.fetchAllMessages.allMessagesArr,fetchAllMessages:state.fetchAllMessages,triggerMessageLoad:state.triggerMessageLoad};};const mapDispatchToProps=dispatch=>{return{loadAllChatFriends:userId=>{dispatch(fetchAllChatFriendsAction(userId));},fetchAllMessages:chatUserId=>{dispatch(fetchAllMessagesAction(chatUserId));},updateUserStatus:userData=>{dispatch(updateUserStatusAction(userData));},addMessage:messageBody=>{dispatch(addMessageAction(messageBody));},loadAllUnreadMessages:()=>{dispatch(fetchAllUnreadMessagesAction());}};};export default connect(mapStateToProps,mapDispatchToProps)(MessageBox);","map":{"version":3,"names":["React","Component","Fragment","userService","toast","ToastComponent","TextareaAutosize","FriendChatBox","FriendMessage","connect","fetchAllChatFriendsAction","updateUserStatusAction","fetchAllMessagesAction","addMessageAction","fetchAllUnreadMessagesAction","Stomp","SockJS","MessageBox","constructor","props","initializeWebSocketConnection","ws","serverUrl","stompClient","over","headers","getAuthHeader","frame","_isMounted","setState","clientConnected","subscribe","message","body","messageBody","JSON","parse","fromUserId","state","chatUserId","getUserId","addMessage","formattedUserNames","formatUsername","fromUserFirstName","fromUserLastName","info","createElement","infoToast","text","position","POSITION","TOP_RIGHT","loadAllUnreadMessages","parsedBody","changeUserOnlineStatus","error","errorToast","token","localStorage","getItem","length","getAllMessages","fetchAllMessages","loadAllChatFriends","userId","handleBlur","field","event","touched","validate","content","changeHeight","userBoxHeight","changeChatBoxHeight","chatBoxHeight","changeChatBoxDisplay","chatBoxDisplay","showUserChatBox","data","id","firstName","lastName","profilePicUrl","chatUserNameFormatted","chatUserFirstName","chatUserLastName","chatUserProfilePicUrl","shouldScrollDown","closeUserChatBox","getOnlineUserCount","usersCount","friendsChatArr","filter","user","online","loggedInUserId","friendsArrLength","getBaseUrl","bind","onChangeHandler","onSubmitHandler","componentDidMount","componentDidUpdate","prevProps","prevState","allMessagesArr","scrollDown","scrollTop","triggerMessageLoad","userData","errorMessage","getErrorMessage","successMessage","getSuccessMessage","success","successToast","componentWillUnmount","disconnect","fetchAllChatFriends","hasError","sendMessage","payload","send","stringify","preventDefault","canBeSubmitted","toUserId","target","name","value","errors","isDisabled","Object","keys","some","x","scrollToBottom","e","document","getElementById","scrollHeight","getBoundingClientRect","height","container","webSocketMessage","updateUserStatus","render","console","log","className","isEnabled","displayButon","loggedInUserFirstName","getFirstName","imageClassUserPick","getImageSize","firstNameFormatted","onClick","style","color","map","friend","assign","key","src","alt","onSubmit","onChange","onBlur","placeholder","maxRows","disabled","type","mapStateToProps","mapDispatchToProps","dispatch"],"sources":["C:/Users/rijul/Downloads/Alumni/Alumani/Client/src/components/home/MessageBox.js"],"sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { userService } from '../../infrastructure';\nimport { toast } from 'react-toastify';\nimport { ToastComponent } from '../common';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport FriendChatBox from './FriendChatBox';\nimport FriendMessage from './FriendMessage';\nimport '../user/css/UserAllPage.css';\nimport './css/MessageBox.css';\nimport { connect } from 'react-redux';\nimport { fetchAllChatFriendsAction, updateUserStatusAction } from '../../store/actions/userActions';\nimport { fetchAllMessagesAction, addMessageAction, fetchAllUnreadMessagesAction } from '../../store/actions/messageActions';\n\nimport Stomp from \"stompjs\";\nimport SockJS from \"sockjs-client\";\n\nclass MessageBox extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            loggedInUserId: '',\n            chatUserId: '',\n            chatUserFirstName: '',\n            chatUserLastName: '',\n            chatUserNameFormatted: '',\n            chatUserProfilePicUrl: '',\n            userBoxHeight: 'toggle',\n            chatBoxHeight: '',\n            chatBoxDisplay: 'display-none',\n            content: '',\n            shouldScrollDown: false,\n            friendsArrLength: 0,\n            clientConnected: false,\n            touched: {\n                content: false,\n            }\n        };\n\n        this._isMounted = false;\n\n        this.serverUrl = userService.getBaseUrl() + '/socket'\n        this.stompClient = null;\n\n        this.handleBlur = this.handleBlur.bind(this);\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSubmitHandler = this.onSubmitHandler.bind(this);\n        this.showUserChatBox = this.showUserChatBox.bind(this);\n        this.changeChatBoxDisplay = this.changeChatBoxDisplay.bind(this);\n        this.getAllMessages = this.getAllMessages.bind(this);\n        this.loadAllChatFriends = this.loadAllChatFriends.bind(this);\n    }\n\n    componentDidMount() {\n        const userId = userService.getUserId();\n        this.setState({\n            loggedInUserId: userId,\n        });\n\n        this.initializeWebSocketConnection();\n        this.loadAllChatFriends();\n\n        this._isMounted = true;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.allMessagesArr !== prevProps.allMessagesArr) {\n            this.setState({\n                content: '',\n            }, () => {\n                if (this.state.shouldScrollDown) {\n                    this.scrollDown();\n                } else {\n                    this.setState({ shouldScrollDown: true }, this.scrollTop())\n                }\n            });\n        }\n\n        if (this.props.friendsChatArr.length !== prevProps.friendsChatArr.length) {\n            this.setState({\n                chatBoxDisplay: 'display-none'\n            })\n        }\n\n        if (this.props.triggerMessageLoad !== prevProps.triggerMessageLoad) {\n            const userData = this.props.triggerMessageLoad;\n            this.showUserChatBox(userData)\n        }\n\n        const errorMessage = this.getErrorMessage(prevProps, prevState);\n        const successMessage = this.getSuccessMessage(prevProps, prevState)\n\n        if (errorMessage) {\n            toast.error(<ToastComponent.errorToast text={errorMessage} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        } else if (successMessage) {\n            toast.success(<ToastComponent.successToast text={successMessage} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this.stompClient.disconnect();\n        this._isMounted = false;\n    }\n\n    getSuccessMessage(prevProps, prevState) {\n        if (!this.props.fetchAllChatFriends.hasError && this.props.fetchAllChatFriends.message && this.props.fetchAllChatFriends !== prevProps.fetchAllChatFriends) {\n            return this.props.fetchAllChatFriends.message;\n        }\n        else if (!this.props.fetchAllMessages.hasError && this.props.fetchAllMessages.message && this.props.fetchAllMessages !== prevProps.fetchAllMessages) {\n            return this.props.fetchAllMessages.message;\n        }\n        return null;\n    }\n\n    getErrorMessage(prevProps, prevState) {\n        if (this.props.fetchAllChatFriends.hasError && prevProps.fetchAllChatFriends.error !== this.props.fetchAllChatFriends.error) {\n            return this.props.fetchAllChatFriends.message || 'Server Error';\n        }\n        else if (this.props.fetchAllMessages.hasError && prevProps.fetchAllMessages.error !== this.props.fetchAllMessages.error) {\n            return this.props.fetchAllMessages.message || 'Server Error';\n        }\n\n        return null;\n    }\n\n    initializeWebSocketConnection = () => {\n        const ws = new SockJS(this.serverUrl);\n        this.stompClient = Stomp.over(ws);\n        const headers = this.getAuthHeader();\n\n        this.stompClient.connect(headers, (frame) => {\n            if (this._isMounted) {\n                this.setState({ clientConnected: true });\n                this.stompClient.subscribe(\"/user/queue/position-update\", (message) => {\n                    if (message.body) {\n                        const messageBody = JSON.parse(message.body);\n                        if (this._isMounted && (messageBody.fromUserId === this.state.chatUserId || messageBody.fromUserId === userService.getUserId())) {\n                            this.props.addMessage(messageBody)\n                        }\n\n                        if (messageBody.fromUserId !== userService.getUserId()) {\n                            const formattedUserNames = userService.formatUsername(messageBody.fromUserFirstName, messageBody.fromUserLastName)\n\n                            toast.info(<ToastComponent.infoToast text={`You have a new message from ${formattedUserNames}!`} />, {\n                                position: toast.POSITION.TOP_RIGHT\n                            });\n\n                            this.props.loadAllUnreadMessages();\n                        }\n                    }\n                });\n\n                this.stompClient.subscribe(\"/chat/login\", (message) => {\n                    if (message.body) {\n                        const parsedBody = JSON.parse(message.body);\n                        this.changeUserOnlineStatus(parsedBody);\n                    }\n                });\n\n                this.stompClient.subscribe(\"/chat/logout\", (message) => {\n                    if (message.body) {\n                        const parsedBody = JSON.parse(message.body);\n                        this.changeUserOnlineStatus(parsedBody);\n                    }\n                });\n            }\n        }, () => {\n            toast.error(<ToastComponent.errorToast text={`Lost connection to ${this.serverUrl}. Refresh the page to reconnect.`} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n\n            //// Callback for automatically reconnecting to the server\n            // setTimeout(() => {\n            //     toast.error(<ToastComponent.errorToast text={`Lost connection to ${this.serverUrl}. Trying to reconnect.`} />, {\n            //         position: toast.POSITION.TOP_RIGHT\n            //     });\n            //     this.initializeWebSocketConnection();\n            // }, 10000);\n        });\n    }\n\n    sendMessage(payload) {\n        this.stompClient.send(\"/app/message\", {}, JSON.stringify(payload));\n        this.setState({ content: '' })\n    }\n\n    getAuthHeader = () => {\n        const token = localStorage.getItem(\"token\");\n        return (token && token.length)\n            ? { 'Authorization': `Bearer ${token}` }\n            : {}\n    }\n\n    getAllMessages = (chatUserId) => {\n        this.props.fetchAllMessages(chatUserId);\n    }\n\n    loadAllChatFriends = () => {\n        const userId = userService.getUserId();\n        this.props.loadAllChatFriends(userId);\n    }\n\n    onSubmitHandler(event) {\n        event.preventDefault();\n\n        if (!this.canBeSubmitted()) {\n            return;\n        }\n\n        const { chatUserId: toUserId, content } = this.state;\n\n        if (this.state.clientConnected) {\n            this.sendMessage({ toUserId, content });\n        } else {\n            toast.error(<ToastComponent.errorToast text={`StompClient is disconnected`} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        }\n    }\n\n    onChangeHandler(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    handleBlur = (field) => (event) => {\n        this.setState({\n            touched: { ...this.state.touched, [field]: true }\n        });\n    }\n\n    canBeSubmitted() {\n        const { content } = this.state;\n        const errors = this.validate(content);\n        const isDisabled = Object.keys(errors).some(x => errors[x])\n        return !isDisabled;\n    }\n\n    validate = (content) => {\n        return {\n            content: content.length === 0,\n        }\n    }\n\n    changeHeight = () => {\n        const userBoxHeight = this.state.userBoxHeight;\n        if (userBoxHeight === '') {\n            this.setState({ userBoxHeight: 'toggle' })\n        } else {\n            this.setState({ userBoxHeight: '' })\n        }\n    }\n\n    changeChatBoxHeight = () => {\n        const chatBoxHeight = this.state.chatBoxHeight;\n        if (chatBoxHeight === '') {\n            this.setState({ chatBoxHeight: 'toggle-chat-container' })\n        } else {\n            this.setState({ chatBoxHeight: '' })\n        }\n    }\n\n    changeChatBoxDisplay = () => {\n        const chatBoxDisplay = this.state.chatBoxDisplay;\n        if (chatBoxDisplay === '') {\n            this.setState({ chatBoxDisplay: 'display-none' })\n        } else {\n            this.setState({ chatBoxDisplay: '' })\n        }\n    }\n\n    showUserChatBox = (data, event) => {\n        const { id, firstName, lastName, profilePicUrl } = data\n        let chatUserNameFormatted = userService.formatUsername(firstName, lastName, 18)\n        this.setState({\n            chatUserId: id,\n            chatUserFirstName: firstName,\n            chatUserLastName: lastName,\n            chatUserNameFormatted,\n            chatUserProfilePicUrl: profilePicUrl,\n            shouldScrollDown: true,\n            chatBoxDisplay: '',\n            chatBoxHeight: '',\n            content: '',\n        }, () => {\n            this.getAllMessages(id);\n        })\n    }\n\n    closeUserChatBox = () => {\n        this.setState({ chatBoxDisplay: 'display-none' })\n    }\n\n    scrollToBottom() {\n        const e = document.getElementById('chat-content');\n        e.scrollTop = e.scrollHeight - e.getBoundingClientRect().height;\n    }\n\n    scrollTop() {\n        const container = document.getElementById('chat-content');\n        container.scrollTop = 0;\n    }\n\n    scrollDown() {\n        const container = document.getElementById('chat-content');\n        container.scrollTop = container.scrollHeight\n    }\n\n    getOnlineUserCount = () => {\n        let usersCount = this.props.friendsChatArr.filter(user => { return user.online === true });\n        return usersCount.length;\n    }\n\n    changeUserOnlineStatus(webSocketMessage) {\n        const { userId: id, online } = webSocketMessage;\n        this.props.updateUserStatus({ id, online });\n    }\n\n    render() {\n        if (!this.state.clientConnected) {\n            console.log('Connecting...')\n            return <h1 className=\"text-center pt-5 mt-5\">Connecting...</h1>\n        }\n\n        const { content } = this.state;\n        const errors = this.validate(content);\n        const isEnabled = !Object.keys(errors).some(x => errors[x]);\n        const displayButon = isEnabled ? '' : 'hidden';\n        const loggedInUserFirstName = userService.getFirstName();\n        const userBoxHeight = this.state.userBoxHeight;\n        const chatBoxHeight = this.state.chatBoxHeight;\n        const chatBoxDisplay = this.state.chatBoxDisplay;\n\n        const { chatUserProfilePicUrl, chatUserNameFormatted } = this.state;\n        const imageClassUserPick = userService.getImageSize(chatUserProfilePicUrl);\n        const firstNameFormatted = userService.formatUsername(loggedInUserFirstName);\n\n        return (\n            <Fragment>\n                <section className={`messagebox-container ${userBoxHeight}`} >\n                    <div className=\"messagebox-header\" onClick={this.changeHeight}>\n                        <div className=\"messagebox-chat-icon\">\n                            <i className=\"fas fa-location-arrow\"></i>\n                        </div>\n                        <h4 className=\"chat-title\" style={{ color: ' #333' }}>\n                            Chat &bull; {this.getOnlineUserCount()}\n                        </h4>\n                    </div>\n                    <div className=\"messagebox-friendsChatArr-wrapper\">\n\n                        {this.props.friendsChatArr.map((friend) =>\n                            <FriendChatBox\n                                key={friend.id}\n                                showUserChatBox={this.showUserChatBox}\n                                {...friend}\n                            />\n                        )}\n                    </div>\n                </section>\n                <section className={`chat-container ${chatBoxHeight} ${chatBoxDisplay}`} id=\"chat-container\">\n                    <div className=\"chat-friend-container\" onClick={this.changeChatBoxHeight}>\n                        <div className=\"chat-friend-image\">\n                            <img className={imageClassUserPick} src={chatUserProfilePicUrl} alt=\"bender\" />\n                        </div>\n                        <div className=\"chat-username-container\" >\n                            <p className=\"chat-username\">{chatUserNameFormatted}</p>\n                        </div>\n                    </div>\n\n                    <div className=\"close-button-container\" onClick={this.closeUserChatBox}>\n                        <div className=\"btn chat-uiButtonGroup chat-fbPhotoCurationControl  chat-delete-button\" ><i className=\"fas fa-times\"></i></div>\n                    </div>\n\n                    <div className=\"content-wrapper\">\n\n                        <div className=\"chat-content\" id=\"chat-content\">\n                            {this.props.allMessagesArr.map((message) =>\n                                <FriendMessage\n                                    key={message.id}\n                                    {...message}\n                                />\n                            )}\n                        </div>\n                        <div className=\"chat-footer\">\n                            <div className=\"chat-input-group\">\n                                <div className=\"chat-area-container\">\n                                    <form onSubmit={this.onSubmitHandler}>\n                                        <div className=\"\" id=\"chat-textarea-form-group\">\n                                            <TextareaAutosize\n                                                name=\"content\"\n                                                id=\"content\"\n                                                className=\"chat-textarea\"\n                                                value={this.state.content}\n                                                onChange={this.onChangeHandler}\n                                                onBlur={this.handleBlur('content')}\n                                                aria-describedby=\"contentHelp\"\n                                                placeholder={`Type your message, ${firstNameFormatted}?`}\n                                                maxRows={6}\n                                            >\n                                            </TextareaAutosize>\n                                        </div>\n\n                                        <div className=\"text-center\">\n                                            <button disabled={!isEnabled} style={{ 'visibility': `${displayButon}` }} type=\"submit\" className=\"btn fas fa-location-arrow App-button-primary send-btn\"></button>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </section>\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        friendsChatArr: state.fetchAllChatFriends.friendsChatArr,\n        fetchAllChatFriends: state.fetchAllChatFriends,\n\n        allMessagesArr: state.fetchAllMessages.allMessagesArr,\n        fetchAllMessages: state.fetchAllMessages,\n\n        triggerMessageLoad: state.triggerMessageLoad,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loadAllChatFriends: (userId) => { dispatch(fetchAllChatFriendsAction(userId)) },\n        fetchAllMessages: (chatUserId) => { dispatch(fetchAllMessagesAction(chatUserId)) },\n        updateUserStatus: (userData) => { dispatch(updateUserStatusAction(userData)) },\n        addMessage: (messageBody) => { dispatch(addMessageAction(messageBody)) },\n        loadAllUnreadMessages: () => { dispatch(fetchAllUnreadMessagesAction()) },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageBox);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}