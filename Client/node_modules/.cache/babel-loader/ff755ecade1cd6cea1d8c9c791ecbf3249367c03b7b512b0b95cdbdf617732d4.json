{"ast":null,"code":"import { FETCH_ALLMESSAGES_BEGIN, FETCH_ALLMESSAGES_SUCCESS, FETCH_ALLMESSAGES_ERROR, ADD_MESSAGE, FETCH_UNREADMESSAGES_SUCCESS, FETCH_UNREADMESSAGES_BEGIN, FETCH_UNREADMESSAGES_ERROR, LOAD_USER_MESSAGES } from '../actions/actionTypes';\n\n// fetchAllMessagesReducer\nconst initialStateAllChatFriends = {\n  allMessagesArr: [],\n  hasError: false,\n  error: '',\n  message: '',\n  status: '',\n  path: '',\n  loading: false\n};\nfunction fetchAllMessagesReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateAllChatFriends;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case FETCH_ALLMESSAGES_BEGIN:\n      return Object.assign({}, state, {\n        allMessagesArr: [],\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: true\n      });\n    case FETCH_ALLMESSAGES_SUCCESS:\n      return Object.assign({}, state, {\n        allMessagesArr: [...action.payload],\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: false\n      });\n    case FETCH_ALLMESSAGES_ERROR:\n      return Object.assign({}, state, {\n        allMessagesArr: [],\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n    case ADD_MESSAGE:\n      return Object.assign({}, state, {\n        allMessagesArr: [...state.allMessagesArr, action.payload],\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n    default:\n      return state;\n  }\n}\n\n// fetchAllUnreadMessagesReducer\nconst initialStateAllUnreadMessages = {\n  allUnreadMessages: [],\n  hasError: false,\n  error: '',\n  message: '',\n  status: '',\n  path: '',\n  loading: false\n};\nfunction fetchAllUnreadMessagesReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateAllUnreadMessages;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case FETCH_UNREADMESSAGES_BEGIN:\n      return Object.assign({}, state, {\n        allUnreadMessages: [],\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: true\n      });\n    case FETCH_UNREADMESSAGES_SUCCESS:\n      return Object.assign({}, state, {\n        allUnreadMessages: [...action.payload],\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: false\n      });\n    case FETCH_UNREADMESSAGES_ERROR:\n      return Object.assign({}, state, {\n        allUnreadMessages: [],\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n    default:\n      return state;\n  }\n}\n\n// triggerMessageLoadAction\nfunction triggerMessageLoadReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case LOAD_USER_MESSAGES:\n      return action.payload;\n    default:\n      return state;\n  }\n}\nexport { fetchAllMessagesReducer, fetchAllUnreadMessagesReducer, triggerMessageLoadReducer };","map":{"version":3,"names":["FETCH_ALLMESSAGES_BEGIN","FETCH_ALLMESSAGES_SUCCESS","FETCH_ALLMESSAGES_ERROR","ADD_MESSAGE","FETCH_UNREADMESSAGES_SUCCESS","FETCH_UNREADMESSAGES_BEGIN","FETCH_UNREADMESSAGES_ERROR","LOAD_USER_MESSAGES","initialStateAllChatFriends","allMessagesArr","hasError","error","message","status","path","loading","fetchAllMessagesReducer","state","arguments","length","undefined","action","type","Object","assign","payload","initialStateAllUnreadMessages","allUnreadMessages","fetchAllUnreadMessagesReducer","triggerMessageLoadReducer"],"sources":["C:/Users/Administrator/Documents/0011_Final_PROJECT/Alumni-Networking-Platform/Client/src/store/reducers/messagesReducer.js"],"sourcesContent":["import {\r\n    FETCH_ALLMESSAGES_BEGIN, FETCH_ALLMESSAGES_SUCCESS, FETCH_ALLMESSAGES_ERROR, ADD_MESSAGE,\r\n    FETCH_UNREADMESSAGES_SUCCESS, FETCH_UNREADMESSAGES_BEGIN, FETCH_UNREADMESSAGES_ERROR, \r\n    LOAD_USER_MESSAGES,\r\n} from '../actions/actionTypes';\r\n\r\n// fetchAllMessagesReducer\r\nconst initialStateAllChatFriends = {\r\n    allMessagesArr: [],\r\n    hasError: false,\r\n    error: '',\r\n    message: '',\r\n    status: '',\r\n    path: '',\r\n    loading: false,\r\n}\r\n\r\nfunction fetchAllMessagesReducer(state = initialStateAllChatFriends, action) {\r\n    switch (action.type) {\r\n        case FETCH_ALLMESSAGES_BEGIN:\r\n            return Object.assign({}, state, {\r\n                allMessagesArr: [],\r\n                hasError: false,\r\n                error: '',\r\n                message: '',\r\n                status: '',\r\n                path: '',\r\n                loading: true,\r\n            })\r\n        case FETCH_ALLMESSAGES_SUCCESS:\r\n            return Object.assign({}, state, {\r\n                allMessagesArr: [...action.payload],\r\n                hasError: false,\r\n                error: '',\r\n                message: '',\r\n                status: '',\r\n                path: '',\r\n                loading: false,\r\n            })\r\n        case FETCH_ALLMESSAGES_ERROR:\r\n            return Object.assign({}, state, {\r\n                allMessagesArr: [],\r\n                hasError: true,\r\n                error: action.error,\r\n                message: action.message,\r\n                status: action.status,\r\n                path: action.path,\r\n                loading: false,\r\n            })\r\n        case ADD_MESSAGE:\r\n            return Object.assign({}, state, {\r\n                allMessagesArr: [...state.allMessagesArr, action.payload],\r\n                hasError: true,\r\n                error: action.error,\r\n                message: action.message,\r\n                status: action.status,\r\n                path: action.path,\r\n                loading: false,\r\n            })\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n// fetchAllUnreadMessagesReducer\r\nconst initialStateAllUnreadMessages = {\r\n    allUnreadMessages: [],\r\n    hasError: false,\r\n    error: '',\r\n    message: '',\r\n    status: '',\r\n    path: '',\r\n    loading: false,\r\n}\r\n\r\nfunction fetchAllUnreadMessagesReducer(state = initialStateAllUnreadMessages, action) {\r\n    switch (action.type) {\r\n        case FETCH_UNREADMESSAGES_BEGIN:\r\n            return Object.assign({}, state, {\r\n                allUnreadMessages: [],\r\n                hasError: false,\r\n                error: '',\r\n                message: '',\r\n                status: '',\r\n                path: '',\r\n                loading: true,\r\n            })\r\n        case FETCH_UNREADMESSAGES_SUCCESS:\r\n            return Object.assign({}, state, {\r\n                allUnreadMessages: [...action.payload],\r\n                hasError: false,\r\n                error: '',\r\n                message: '',\r\n                status: '',\r\n                path: '',\r\n                loading: false,\r\n            })\r\n        case FETCH_UNREADMESSAGES_ERROR:\r\n            return Object.assign({}, state, {\r\n                allUnreadMessages: [],\r\n                hasError: true,\r\n                error: action.error,\r\n                message: action.message,\r\n                status: action.status,\r\n                path: action.path,\r\n                loading: false,\r\n            })\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n// triggerMessageLoadAction\r\nfunction triggerMessageLoadReducer(state = {}, action) {\r\n    switch (action.type) {\r\n        case LOAD_USER_MESSAGES:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport {\r\n    fetchAllMessagesReducer, fetchAllUnreadMessagesReducer, triggerMessageLoadReducer,\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}