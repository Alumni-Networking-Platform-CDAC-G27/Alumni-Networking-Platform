{"ast":null,"code":"import { FETCH_ALL_LOGS_SUCCESS, FETCH_ALL_LOGS_BEGIN, FETCH_ALL_LOGS_ERROR, FINDBYUSERNAME_LOGS_SUCCESS, FINDBYUSERNAME_LOGS_BEGIN, FINDBYUSERNAME_LOGS_ERROR, CLEARBYUSERNAME_LOGS_SUCCESS, CLEARBYUSERNAME_LOGS_BEGIN, CLEARBYUSERNAME_LOGS_ERROR, CLEAR_ALL_LOGS_SUCCESS, CLEAR_ALL_LOGS_BEGIN, CLEAR_ALL_LOGS_ERROR } from '../actions/actionTypes';\n\n// fetchAllLogsReducer\nconst initialStateFetchAllLogs = {\n  logsArr: [],\n  hasError: false,\n  error: '',\n  message: '',\n  status: '',\n  path: '',\n  loading: false\n};\nfunction fetchAllLogsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateFetchAllLogs;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case FETCH_ALL_LOGS_BEGIN:\n      return Object.assign({}, state, {\n        logsArr: [],\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: true\n      });\n    case FETCH_ALL_LOGS_SUCCESS:\n      return Object.assign({}, state, {\n        logsArr: [...action.payload],\n        hasError: false,\n        error: '',\n        message: 'All logs successfully loaded.',\n        status: '',\n        path: '',\n        loading: false\n      });\n    case FETCH_ALL_LOGS_ERROR:\n      return Object.assign({}, state, {\n        logsArr: [],\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n    case CLEAR_ALL_LOGS_SUCCESS:\n      return Object.assign({}, state, {\n        logsArr: [],\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: false\n      });\n    default:\n      return state;\n  }\n}\n\n// findLogsByUserNameReducer\nconst initialStateFindLogsByUserName = {\n  logsArr: [],\n  hasError: false,\n  error: '',\n  message: '',\n  status: '',\n  path: '',\n  loading: false\n};\nfunction findLogsByUserNameReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateFindLogsByUserName;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case FINDBYUSERNAME_LOGS_BEGIN:\n      return Object.assign({}, state, {\n        logsArr: [],\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: true\n      });\n    case FINDBYUSERNAME_LOGS_SUCCESS:\n      return Object.assign({}, state, {\n        logsArr: [...action.payload],\n        hasError: false,\n        error: '',\n        message: action.message,\n        status: '',\n        path: '',\n        loading: false\n      });\n    case FINDBYUSERNAME_LOGS_ERROR:\n      return Object.assign({}, state, {\n        logsArr: [],\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n    default:\n      return state;\n  }\n}\n\n// clearByUserNameReducer\nconst initialStateClearLogsByUserName = {\n  hasError: false,\n  error: '',\n  message: '',\n  status: '',\n  path: '',\n  loading: false\n};\nfunction clearLogsByUserNameReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateClearLogsByUserName;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case CLEARBYUSERNAME_LOGS_BEGIN:\n      return Object.assign({}, state, {\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: true\n      });\n    case CLEARBYUSERNAME_LOGS_SUCCESS:\n      return Object.assign({}, state, {\n        hasError: false,\n        error: '',\n        message: action.payload.message,\n        status: '',\n        path: '',\n        loading: false\n      });\n    case CLEARBYUSERNAME_LOGS_ERROR:\n      return Object.assign({}, state, {\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n    default:\n      return state;\n  }\n}\n\n// clearAllLogsReducer\nconst initialStateClearAllLogs = {\n  hasError: false,\n  error: '',\n  message: '',\n  status: '',\n  path: '',\n  loading: false\n};\nfunction clearAllLogsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateClearAllLogs;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case CLEAR_ALL_LOGS_BEGIN:\n      return Object.assign({}, state, {\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: true\n      });\n    case CLEAR_ALL_LOGS_SUCCESS:\n      return Object.assign({}, state, {\n        hasError: false,\n        error: '',\n        message: action.payload.message,\n        status: '',\n        path: '',\n        loading: false\n      });\n    case CLEAR_ALL_LOGS_ERROR:\n      return Object.assign({}, state, {\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n    default:\n      return state;\n  }\n}\nexport { fetchAllLogsReducer, findLogsByUserNameReducer, clearLogsByUserNameReducer, clearAllLogsReducer };","map":{"version":3,"names":["FETCH_ALL_LOGS_SUCCESS","FETCH_ALL_LOGS_BEGIN","FETCH_ALL_LOGS_ERROR","FINDBYUSERNAME_LOGS_SUCCESS","FINDBYUSERNAME_LOGS_BEGIN","FINDBYUSERNAME_LOGS_ERROR","CLEARBYUSERNAME_LOGS_SUCCESS","CLEARBYUSERNAME_LOGS_BEGIN","CLEARBYUSERNAME_LOGS_ERROR","CLEAR_ALL_LOGS_SUCCESS","CLEAR_ALL_LOGS_BEGIN","CLEAR_ALL_LOGS_ERROR","initialStateFetchAllLogs","logsArr","hasError","error","message","status","path","loading","fetchAllLogsReducer","state","arguments","length","undefined","action","type","Object","assign","payload","initialStateFindLogsByUserName","findLogsByUserNameReducer","initialStateClearLogsByUserName","clearLogsByUserNameReducer","initialStateClearAllLogs","clearAllLogsReducer"],"sources":["C:/Users/rijul/Downloads/Alumni/Alumani/Client/src/store/reducers/logsReducer.js"],"sourcesContent":["import {\n    FETCH_ALL_LOGS_SUCCESS, FETCH_ALL_LOGS_BEGIN, FETCH_ALL_LOGS_ERROR,\n    FINDBYUSERNAME_LOGS_SUCCESS, FINDBYUSERNAME_LOGS_BEGIN, FINDBYUSERNAME_LOGS_ERROR,\n    CLEARBYUSERNAME_LOGS_SUCCESS, CLEARBYUSERNAME_LOGS_BEGIN, CLEARBYUSERNAME_LOGS_ERROR,\n    CLEAR_ALL_LOGS_SUCCESS, CLEAR_ALL_LOGS_BEGIN, CLEAR_ALL_LOGS_ERROR,\n} from '../actions/actionTypes';\n\n// fetchAllLogsReducer\nconst initialStateFetchAllLogs = {\n    logsArr: [],\n    hasError: false,\n    error: '',\n    message: '',\n    status: '',\n    path: '',\n    loading: false,\n}\n\nfunction fetchAllLogsReducer(state = initialStateFetchAllLogs, action) {\n    switch (action.type) {\n        case FETCH_ALL_LOGS_BEGIN:\n            return Object.assign({}, state, {\n                logsArr: [],\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: true,\n            })\n        case FETCH_ALL_LOGS_SUCCESS:\n            return Object.assign({}, state, {\n                logsArr: [...action.payload],\n                hasError: false,\n                error: '',\n                message: 'All logs successfully loaded.',\n                status: '',\n                path: '',\n                loading: false,\n            })\n        case FETCH_ALL_LOGS_ERROR:\n            return Object.assign({}, state, {\n                logsArr: [],\n                hasError: true,\n                error: action.error,\n                message: action.message,\n                status: action.status,\n                path: action.path,\n                loading: false,\n            })\n        case CLEAR_ALL_LOGS_SUCCESS:\n            return Object.assign({}, state, {\n                logsArr: [],\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: false,\n            })\n        default:\n            return state\n    }\n}\n\n// findLogsByUserNameReducer\nconst initialStateFindLogsByUserName = {\n    logsArr: [],\n    hasError: false,\n    error: '',\n    message: '',\n    status: '',\n    path: '',\n    loading: false,\n}\n\nfunction findLogsByUserNameReducer(state = initialStateFindLogsByUserName, action) {\n    switch (action.type) {\n        case FINDBYUSERNAME_LOGS_BEGIN:\n            return Object.assign({}, state, {\n                logsArr: [],\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: true,\n            })\n        case FINDBYUSERNAME_LOGS_SUCCESS:\n            return Object.assign({}, state, {\n                logsArr: [...action.payload],\n                hasError: false,\n                error: '',\n                message: action.message,\n                status: '',\n                path: '',\n                loading: false,\n            })\n        case FINDBYUSERNAME_LOGS_ERROR:\n            return Object.assign({}, state, {\n                logsArr: [],\n                hasError: true,\n                error: action.error,\n                message: action.message,\n                status: action.status,\n                path: action.path,\n                loading: false,\n            })\n        default:\n            return state\n    }\n}\n\n// clearByUserNameReducer\nconst initialStateClearLogsByUserName = {\n    hasError: false,\n    error: '',\n    message: '',\n    status: '',\n    path: '',\n    loading: false,\n}\n\nfunction clearLogsByUserNameReducer(state = initialStateClearLogsByUserName, action) {\n    switch (action.type) {\n        case CLEARBYUSERNAME_LOGS_BEGIN:\n            return Object.assign({}, state, {\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: true,\n            })\n        case CLEARBYUSERNAME_LOGS_SUCCESS:\n            return Object.assign({}, state, {\n                hasError: false,\n                error: '',\n                message: action.payload.message,\n                status: '',\n                path: '',\n                loading: false,\n            })\n        case CLEARBYUSERNAME_LOGS_ERROR:\n            return Object.assign({}, state, {\n                hasError: true,\n                error: action.error,\n                message: action.message,\n                status: action.status,\n                path: action.path,\n                loading: false,\n            })\n        default:\n            return state\n    }\n}\n\n// clearAllLogsReducer\nconst initialStateClearAllLogs = {\n    hasError: false,\n    error: '',\n    message: '',\n    status: '',\n    path: '',\n    loading: false,\n}\n\nfunction clearAllLogsReducer(state = initialStateClearAllLogs, action) {\n    switch (action.type) {\n        case CLEAR_ALL_LOGS_BEGIN:\n            return Object.assign({}, state, {\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: true,\n            })\n        case CLEAR_ALL_LOGS_SUCCESS:\n            return Object.assign({}, state, {\n                hasError: false,\n                error: '',\n                message: action.payload.message,\n                status: '',\n                path: '',\n                loading: false,\n            })\n        case CLEAR_ALL_LOGS_ERROR:\n            return Object.assign({}, state, {\n                hasError: true,\n                error: action.error,\n                message: action.message,\n                status: action.status,\n                path: action.path,\n                loading: false,\n            })\n        default:\n            return state\n    }\n}\n\nexport {\n    fetchAllLogsReducer, findLogsByUserNameReducer, clearLogsByUserNameReducer, clearAllLogsReducer\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}