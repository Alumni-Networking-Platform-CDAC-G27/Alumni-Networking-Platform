{"ast":null,"code":"import{requester}from'../../infrastructure';import{FETCH_ALLPOSTS_BEGIN,FETCH_ALLPOSTS_SUCCESS,FETCH_ALLPOSTS_ERROR,REMOVE_POST_BEGIN,REMOVE_POST_SUCCESS,REMOVE_POST_ERROR,ADDLIKE_POST_SUCCESS,ADDLIKE_POST_BEGIN,ADDLIKE_POST_ERROR,CREATE_POST_SUCCESS,CREATE_POST_BEGIN,CREATE_POST_ERROR}from'./actionTypes';// createPost\nconst createPostSuccess=response=>{return{type:CREATE_POST_SUCCESS,payload:response};};const createPostBegin=()=>{return{type:CREATE_POST_BEGIN};};const createPostError=(error,message,status,path)=>{return{type:CREATE_POST_ERROR,error,message,status,path};};const createPostAction=(timelineUserId,loggedInUserId,content,imageUrl)=>{const requestBody={timelineUserId,loggedInUserId,content,imageUrl};return dispatch=>{dispatch(createPostBegin());return requester.post('/post/create',requestBody,response=>{if(response.error){const{error,message,status,path}=response;dispatch(createPostError(error,message,status,path));}else{dispatch(createPostSuccess(response));dispatch(fetchAllPostsAction(timelineUserId));}}).catch(err=>{if(err.status===403&&err.message==='Your JWT token is expired. Please log in!'){localStorage.clear();}dispatch(createPostError('',`Error: ${err.message}`,err.status,''));});};};// fetchAllPosts\nconst fetchAllPostsSuccess=allPostsArr=>{return{type:FETCH_ALLPOSTS_SUCCESS,payload:allPostsArr};};const fetchAllPostsBegin=()=>{return{type:FETCH_ALLPOSTS_BEGIN};};const fetchAllPostsError=(error,message,status,path)=>{return{type:FETCH_ALLPOSTS_ERROR,error,message,status,path};};const fetchAllPostsAction=userId=>{return dispatch=>{dispatch(fetchAllPostsBegin());return requester.get('/post/all/'+userId,response=>{if(response.error){const{error,message,status,path}=response;dispatch(fetchAllPostsError(error,message,status,path));}else{dispatch(fetchAllPostsSuccess(response));}}).catch(err=>{if(err.status===403&&err.message==='Your JWT token is expired. Please log in!'){localStorage.clear();}dispatch(fetchAllPostsError('',`Error: ${err.message}`,err.status,''));});};};// removePost\nconst removePostSuccess=response=>{return{type:REMOVE_POST_SUCCESS,payload:response};};const removePostBegin=()=>{return{type:REMOVE_POST_BEGIN};};const removePostError=(error,message,status,path)=>{return{type:REMOVE_POST_ERROR,error,message,status,path};};const removePostAction=(loggedInUserId,postToRemoveId,timelineUserId)=>{const requestBody={loggedInUserId,postToRemoveId};return dispatch=>{dispatch(removePostBegin());return requester.post('/post/remove',requestBody,response=>{if(response.error){const{error,message,status,path}=response;dispatch(removePostError(error,message,status,path));}else{dispatch(removePostSuccess(response));dispatch(fetchAllPostsAction(timelineUserId));}}).catch(err=>{if(err.status===403&&err.message==='Your JWT token is expired. Please log in!'){localStorage.clear();}dispatch(removePostError('',`Error: ${err.message}`,err.status,''));});};};// addLike\nconst addLikePostSuccess=response=>{return{type:ADDLIKE_POST_SUCCESS,payload:response};};const addLikePostBegin=()=>{return{type:ADDLIKE_POST_BEGIN};};const addLikePostError=(error,message,status,path)=>{return{type:ADDLIKE_POST_ERROR,error,message,status,path};};const addLikePostAction=(loggedInUserId,postId,timelineUserId)=>{const requestBody={postId,loggedInUserId};return dispatch=>{dispatch(addLikePostBegin());return requester.post('/like/add',requestBody,response=>{if(response.error){const{error,message,status,path}=response;dispatch(addLikePostError(error,message,status,path));}else{dispatch(addLikePostSuccess(response));dispatch(fetchAllPostsAction(timelineUserId));}}).catch(err=>{if(err.status===403&&err.message==='Your JWT token is expired. Please log in!'){localStorage.clear();}dispatch(addLikePostError('',`Error: ${err.message}`,err.status,''));});};};export{createPostAction,fetchAllPostsAction,removePostAction,addLikePostAction};","map":{"version":3,"names":["requester","FETCH_ALLPOSTS_BEGIN","FETCH_ALLPOSTS_SUCCESS","FETCH_ALLPOSTS_ERROR","REMOVE_POST_BEGIN","REMOVE_POST_SUCCESS","REMOVE_POST_ERROR","ADDLIKE_POST_SUCCESS","ADDLIKE_POST_BEGIN","ADDLIKE_POST_ERROR","CREATE_POST_SUCCESS","CREATE_POST_BEGIN","CREATE_POST_ERROR","createPostSuccess","response","type","payload","createPostBegin","createPostError","error","message","status","path","createPostAction","timelineUserId","loggedInUserId","content","imageUrl","requestBody","dispatch","post","fetchAllPostsAction","catch","err","localStorage","clear","fetchAllPostsSuccess","allPostsArr","fetchAllPostsBegin","fetchAllPostsError","userId","get","removePostSuccess","removePostBegin","removePostError","removePostAction","postToRemoveId","addLikePostSuccess","addLikePostBegin","addLikePostError","addLikePostAction","postId"],"sources":["C:/Users/rijul/Downloads/Alumni/Alumani/Client/src/store/actions/postActions.js"],"sourcesContent":["import { requester } from '../../infrastructure';\nimport {\n    FETCH_ALLPOSTS_BEGIN, FETCH_ALLPOSTS_SUCCESS, FETCH_ALLPOSTS_ERROR,\n    REMOVE_POST_BEGIN, REMOVE_POST_SUCCESS, REMOVE_POST_ERROR,\n    ADDLIKE_POST_SUCCESS, ADDLIKE_POST_BEGIN, ADDLIKE_POST_ERROR,\n    CREATE_POST_SUCCESS, CREATE_POST_BEGIN, CREATE_POST_ERROR\n} from './actionTypes';\n\n// createPost\nconst createPostSuccess = (response) => {\n    return {\n        type: CREATE_POST_SUCCESS,\n        payload: response\n    }\n}\n\nconst createPostBegin = () => {\n    return {\n        type: CREATE_POST_BEGIN,\n    }\n}\n\nconst createPostError = (error, message, status, path) => {\n    return {\n        type: CREATE_POST_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst createPostAction = (timelineUserId, loggedInUserId, content, imageUrl) => {\n    const requestBody = { timelineUserId, loggedInUserId, content, imageUrl }\n    return (dispatch) => {\n        dispatch(createPostBegin())\n        return requester.post('/post/create', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(createPostError(error, message, status, path));\n            } else {\n                dispatch(createPostSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(createPostError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// fetchAllPosts\nconst fetchAllPostsSuccess = (allPostsArr) => {\n    return {\n        type: FETCH_ALLPOSTS_SUCCESS,\n        payload: allPostsArr\n    }\n}\n\nconst fetchAllPostsBegin = () => {\n    return {\n        type: FETCH_ALLPOSTS_BEGIN,\n    }\n}\n\nconst fetchAllPostsError = (error, message, status, path) => {\n    return {\n        type: FETCH_ALLPOSTS_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst fetchAllPostsAction = (userId) => {\n    return (dispatch) => {\n        dispatch(fetchAllPostsBegin())\n        return requester.get('/post/all/' + userId, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(fetchAllPostsError(error, message, status, path));\n            } else {\n                dispatch(fetchAllPostsSuccess(response));\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(fetchAllPostsError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// removePost\nconst removePostSuccess = (response) => {\n    return {\n        type: REMOVE_POST_SUCCESS,\n        payload: response\n    }\n}\n\nconst removePostBegin = () => {\n    return {\n        type: REMOVE_POST_BEGIN,\n    }\n}\n\nconst removePostError = (error, message, status, path) => {\n    return {\n        type: REMOVE_POST_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst removePostAction = (loggedInUserId, postToRemoveId, timelineUserId) => {\n    const requestBody = { loggedInUserId, postToRemoveId }\n    return (dispatch) => {\n        dispatch(removePostBegin())\n        return requester.post('/post/remove', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(removePostError(error, message, status, path));\n            } else {\n                dispatch(removePostSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(removePostError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// addLike\n\nconst addLikePostSuccess = (response) => {\n    return {\n        type: ADDLIKE_POST_SUCCESS,\n        payload: response\n    }\n}\n\nconst addLikePostBegin = () => {\n    return {\n        type: ADDLIKE_POST_BEGIN,\n    }\n}\n\nconst addLikePostError = (error, message, status, path) => {\n    return {\n        type: ADDLIKE_POST_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst addLikePostAction = (loggedInUserId, postId, timelineUserId) => {\n    const requestBody = { postId, loggedInUserId }\n    return (dispatch) => {\n        dispatch(addLikePostBegin())\n        return requester.post('/like/add', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(addLikePostError(error, message, status, path));\n            } else {\n                dispatch(addLikePostSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(addLikePostError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\nexport { createPostAction, fetchAllPostsAction, removePostAction, addLikePostAction, };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}