{"ast":null,"code":"import { requester } from '../../infrastructure';\nimport { REMOVE_COMMENT_BEGIN, REMOVE_COMMENT_SUCCESS, REMOVE_COMMENT_ERROR, ADDLIKE_COMMENT_SUCCESS, ADDLIKE_COMMENT_BEGIN, ADDLIKE_COMMENT_ERROR, CREATE_COMMENT_SUCCESS, CREATE_COMMENT_BEGIN, CREATE_COMMENT_ERROR } from './actionTypes';\nimport { fetchAllPostsAction } from './postActions';\n\n// createComment\nvar createCommentSuccess = function createCommentSuccess(response) {\n  return {\n    type: CREATE_COMMENT_SUCCESS,\n    payload: response\n  };\n};\nvar createCommentBegin = function createCommentBegin() {\n  return {\n    type: CREATE_COMMENT_BEGIN\n  };\n};\nvar createCommentError = function createCommentError(error, message, status, path) {\n  return {\n    type: CREATE_COMMENT_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\nvar createCommentAction = function createCommentAction(postId, loggedInUserId, timelineUserId, content, imageUrl) {\n  var requestBody = {\n    postId: postId,\n    loggedInUserId: loggedInUserId,\n    timelineUserId: timelineUserId,\n    content: content,\n    imageUrl: imageUrl\n  };\n  return function (dispatch) {\n    dispatch(createCommentBegin());\n    return requester.post('/comment/create', requestBody, function (response) {\n      if (response.error) {\n        var error = response.error,\n          message = response.message,\n          status = response.status,\n          path = response.path;\n        dispatch(createCommentError(error, message, status, path));\n      } else {\n        dispatch(createCommentSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(createCommentError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n};\n\n// removeComment\nvar removeCommentSuccess = function removeCommentSuccess(response) {\n  return {\n    type: REMOVE_COMMENT_SUCCESS,\n    payload: response\n  };\n};\nvar removeCommentBegin = function removeCommentBegin() {\n  return {\n    type: REMOVE_COMMENT_BEGIN\n  };\n};\nvar removeCommentError = function removeCommentError(error, message, status, path) {\n  return {\n    type: REMOVE_COMMENT_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\nvar removeCommentAction = function removeCommentAction(loggedInUserId, commentToRemoveId, timelineUserId) {\n  var requestBody = {\n    loggedInUserId: loggedInUserId,\n    commentToRemoveId: commentToRemoveId\n  };\n  return function (dispatch) {\n    dispatch(removeCommentBegin());\n    return requester.post('/comment/remove', requestBody, function (response) {\n      if (response.error) {\n        var error = response.error,\n          message = response.message,\n          status = response.status,\n          path = response.path;\n        dispatch(removeCommentError(error, message, status, path));\n      } else {\n        dispatch(removeCommentSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(removeCommentError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n};\n\n// addLike\nvar addLikeCommentSuccess = function addLikeCommentSuccess(response) {\n  return {\n    type: ADDLIKE_COMMENT_SUCCESS,\n    payload: response\n  };\n};\nvar addLikeCommentBegin = function addLikeCommentBegin() {\n  return {\n    type: ADDLIKE_COMMENT_BEGIN\n  };\n};\nvar addLikeCommentError = function addLikeCommentError(error, message, status, path) {\n  return {\n    type: ADDLIKE_COMMENT_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\nvar addLikeCommentAction = function addLikeCommentAction(loggedInUserId, commentId, timelineUserId) {\n  var requestBody = {\n    commentId: commentId,\n    loggedInUserId: loggedInUserId\n  };\n  return function (dispatch) {\n    dispatch(addLikeCommentBegin());\n    return requester.post('/like/comment', requestBody, function (response) {\n      if (response.error) {\n        var error = response.error,\n          message = response.message,\n          status = response.status,\n          path = response.path;\n        dispatch(addLikeCommentError(error, message, status, path));\n      } else {\n        dispatch(addLikeCommentSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(addLikeCommentError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n};\nexport { createCommentAction, removeCommentAction, addLikeCommentAction };","map":{"version":3,"names":["requester","REMOVE_COMMENT_BEGIN","REMOVE_COMMENT_SUCCESS","REMOVE_COMMENT_ERROR","ADDLIKE_COMMENT_SUCCESS","ADDLIKE_COMMENT_BEGIN","ADDLIKE_COMMENT_ERROR","CREATE_COMMENT_SUCCESS","CREATE_COMMENT_BEGIN","CREATE_COMMENT_ERROR","fetchAllPostsAction","createCommentSuccess","response","type","payload","createCommentBegin","createCommentError","error","message","status","path","createCommentAction","postId","loggedInUserId","timelineUserId","content","imageUrl","requestBody","dispatch","post","catch","err","localStorage","clear","concat","removeCommentSuccess","removeCommentBegin","removeCommentError","removeCommentAction","commentToRemoveId","addLikeCommentSuccess","addLikeCommentBegin","addLikeCommentError","addLikeCommentAction","commentId"],"sources":["C:/Users/salma/Desktop/IN DEVLOPMENT/Social-Network-master/SocialNetwork/Client/src/store/actions/commentActions.js"],"sourcesContent":["import { requester } from '../../infrastructure';\nimport {\n    REMOVE_COMMENT_BEGIN, REMOVE_COMMENT_SUCCESS, REMOVE_COMMENT_ERROR,\n    ADDLIKE_COMMENT_SUCCESS, ADDLIKE_COMMENT_BEGIN, ADDLIKE_COMMENT_ERROR,\n    CREATE_COMMENT_SUCCESS, CREATE_COMMENT_BEGIN, CREATE_COMMENT_ERROR,\n} from './actionTypes';\n\nimport { fetchAllPostsAction } from './postActions'\n\n// createComment\nconst createCommentSuccess = (response) => {\n    return {\n        type: CREATE_COMMENT_SUCCESS,\n        payload: response\n    }\n}\n\nconst createCommentBegin = () => {\n    return {\n        type: CREATE_COMMENT_BEGIN,\n    }\n}\n\nconst createCommentError = (error, message, status, path) => {\n    return {\n        type: CREATE_COMMENT_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst createCommentAction = (postId, loggedInUserId, timelineUserId, content, imageUrl) => {\n    const requestBody = { postId, loggedInUserId, timelineUserId, content, imageUrl }\n    return (dispatch) => {\n        dispatch(createCommentBegin())\n        return requester.post('/comment/create', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(createCommentError(error, message, status, path));\n            } else {\n                dispatch(createCommentSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(createCommentError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// removeComment\nconst removeCommentSuccess = (response) => {\n    return {\n        type: REMOVE_COMMENT_SUCCESS,\n        payload: response\n    }\n}\n\nconst removeCommentBegin = () => {\n    return {\n        type: REMOVE_COMMENT_BEGIN,\n    }\n}\n\nconst removeCommentError = (error, message, status, path) => {\n    return {\n        type: REMOVE_COMMENT_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst removeCommentAction = (loggedInUserId, commentToRemoveId, timelineUserId) => {\n    const requestBody = { loggedInUserId, commentToRemoveId }\n    return (dispatch) => {\n        dispatch(removeCommentBegin())\n        return requester.post('/comment/remove', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(removeCommentError(error, message, status, path));\n            } else {\n                dispatch(removeCommentSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(removeCommentError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// addLike\nconst addLikeCommentSuccess = (response) => {\n    return {\n        type: ADDLIKE_COMMENT_SUCCESS,\n        payload: response\n    }\n}\n\nconst addLikeCommentBegin = () => {\n    return {\n        type: ADDLIKE_COMMENT_BEGIN,\n    }\n}\n\nconst addLikeCommentError = (error, message, status, path) => {\n    return {\n        type: ADDLIKE_COMMENT_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst addLikeCommentAction = (loggedInUserId, commentId, timelineUserId) => {\n    const requestBody = { commentId, loggedInUserId }\n    return (dispatch) => {\n        dispatch(addLikeCommentBegin())\n        return requester.post('/like/comment', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(addLikeCommentError(error, message, status, path));\n            } else {\n                dispatch(addLikeCommentSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(addLikeCommentError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n\nexport { createCommentAction, removeCommentAction, addLikeCommentAction, };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}