{"ast":null,"code":"import { requester } from '../../infrastructure';\nimport { FETCH_ALLMESSAGES_SUCCESS, FETCH_ALLMESSAGES_BEGIN, FETCH_ALLMESSAGES_ERROR, ADD_MESSAGE, FETCH_UNREADMESSAGES_SUCCESS, FETCH_UNREADMESSAGES_BEGIN, FETCH_UNREADMESSAGES_ERROR, LOAD_USER_MESSAGES } from './actionTypes';\n\n// fetchAllMessages\nvar fetchAllMessagesSuccess = function fetchAllMessagesSuccess(allMessages) {\n  return {\n    type: FETCH_ALLMESSAGES_SUCCESS,\n    payload: allMessages\n  };\n};\nvar fetchAllMessagesBegin = function fetchAllMessagesBegin() {\n  return {\n    type: FETCH_ALLMESSAGES_BEGIN\n  };\n};\nvar fetchAllMessagesError = function fetchAllMessagesError(error, message, status, path) {\n  return {\n    type: FETCH_ALLMESSAGES_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\nvar fetchAllMessagesAction = function fetchAllMessagesAction(chatUserId) {\n  return function (dispatch) {\n    dispatch(fetchAllMessagesBegin());\n    return requester.get('/message/all/' + chatUserId, function (response) {\n      if (response.error) {\n        var error = response.error,\n          message = response.message,\n          status = response.status,\n          path = response.path;\n        dispatch(fetchAllMessagesError(error, message, status, path));\n      } else {\n        dispatch(fetchAllMessagesSuccess(response));\n        dispatch(fetchAllUnreadMessagesAction());\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(fetchAllMessagesError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n};\nvar addMessageAction = function addMessageAction(messageBody) {\n  return {\n    type: ADD_MESSAGE,\n    payload: messageBody\n  };\n};\n\n// fetchAllUnreadMessages\nvar fetchAllUnreadMessagesSuccess = function fetchAllUnreadMessagesSuccess(allUnreadMessages) {\n  return {\n    type: FETCH_UNREADMESSAGES_SUCCESS,\n    payload: allUnreadMessages\n  };\n};\nvar fetchAllUnreadMessagesBegin = function fetchAllUnreadMessagesBegin() {\n  return {\n    type: FETCH_UNREADMESSAGES_BEGIN\n  };\n};\nvar fetchAllUnreadMessagesError = function fetchAllUnreadMessagesError(error, message, status, path) {\n  return {\n    type: FETCH_UNREADMESSAGES_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\nvar fetchAllUnreadMessagesAction = function fetchAllUnreadMessagesAction() {\n  return function (dispatch) {\n    dispatch(fetchAllUnreadMessagesBegin());\n    return requester.get('/message/friend', function (response) {\n      if (response.error) {\n        var error = response.error,\n          message = response.message,\n          status = response.status,\n          path = response.path;\n        dispatch(fetchAllUnreadMessagesError(error, message, status, path));\n      } else {\n        dispatch(fetchAllUnreadMessagesSuccess(response));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(fetchAllUnreadMessagesError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n};\n\n// LoadUserMessages and showUserChatBox\nvar triggerMessageLoadAction = function triggerMessageLoadAction(userData) {\n  return {\n    type: LOAD_USER_MESSAGES,\n    payload: userData\n  };\n};\nexport { fetchAllMessagesAction, addMessageAction, fetchAllUnreadMessagesAction, triggerMessageLoadAction };","map":{"version":3,"names":["requester","FETCH_ALLMESSAGES_SUCCESS","FETCH_ALLMESSAGES_BEGIN","FETCH_ALLMESSAGES_ERROR","ADD_MESSAGE","FETCH_UNREADMESSAGES_SUCCESS","FETCH_UNREADMESSAGES_BEGIN","FETCH_UNREADMESSAGES_ERROR","LOAD_USER_MESSAGES","fetchAllMessagesSuccess","allMessages","type","payload","fetchAllMessagesBegin","fetchAllMessagesError","error","message","status","path","fetchAllMessagesAction","chatUserId","dispatch","get","response","fetchAllUnreadMessagesAction","catch","err","localStorage","clear","concat","addMessageAction","messageBody","fetchAllUnreadMessagesSuccess","allUnreadMessages","fetchAllUnreadMessagesBegin","fetchAllUnreadMessagesError","triggerMessageLoadAction","userData"],"sources":["C:/Users/salma/Desktop/IN DEVLOPMENT/Alumani/Client/src/store/actions/messageActions.js"],"sourcesContent":["import { requester } from '../../infrastructure';\nimport {\n    FETCH_ALLMESSAGES_SUCCESS, FETCH_ALLMESSAGES_BEGIN, FETCH_ALLMESSAGES_ERROR, ADD_MESSAGE,\n    FETCH_UNREADMESSAGES_SUCCESS, FETCH_UNREADMESSAGES_BEGIN, FETCH_UNREADMESSAGES_ERROR, LOAD_USER_MESSAGES,\n} from './actionTypes';\n\n// fetchAllMessages\nconst fetchAllMessagesSuccess = (allMessages) => {\n    return {\n        type: FETCH_ALLMESSAGES_SUCCESS,\n        payload: allMessages\n    }\n}\n\nconst fetchAllMessagesBegin = () => {\n    return {\n        type: FETCH_ALLMESSAGES_BEGIN,\n    }\n}\n\nconst fetchAllMessagesError = (error, message, status, path) => {\n    return {\n        type: FETCH_ALLMESSAGES_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst fetchAllMessagesAction = (chatUserId) => {\n    return (dispatch) => {\n        dispatch(fetchAllMessagesBegin())\n        return requester.get('/message/all/' + chatUserId, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(fetchAllMessagesError(error, message, status, path));\n            } else {\n                dispatch(fetchAllMessagesSuccess(response));\n                dispatch(fetchAllUnreadMessagesAction());\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(fetchAllMessagesError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\nconst addMessageAction = (messageBody) => {\n    return {\n        type: ADD_MESSAGE,\n        payload: messageBody\n    }\n}\n\n// fetchAllUnreadMessages\nconst fetchAllUnreadMessagesSuccess = (allUnreadMessages) => {\n    return {\n        type: FETCH_UNREADMESSAGES_SUCCESS,\n        payload: allUnreadMessages\n    }\n}\n\nconst fetchAllUnreadMessagesBegin = () => {\n    return {\n        type: FETCH_UNREADMESSAGES_BEGIN,\n    }\n}\n\nconst fetchAllUnreadMessagesError = (error, message, status, path) => {\n    return {\n        type: FETCH_UNREADMESSAGES_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst fetchAllUnreadMessagesAction = () => {\n    return (dispatch) => {\n        dispatch(fetchAllUnreadMessagesBegin())\n        return requester.get('/message/friend', (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(fetchAllUnreadMessagesError(error, message, status, path));\n            } else {\n                dispatch(fetchAllUnreadMessagesSuccess(response));\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(fetchAllUnreadMessagesError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// LoadUserMessages and showUserChatBox\nconst triggerMessageLoadAction = (userData) => {\n    return {\n        type: LOAD_USER_MESSAGES,\n        payload: userData\n    }\n}\n\nexport { fetchAllMessagesAction, addMessageAction, fetchAllUnreadMessagesAction, triggerMessageLoadAction };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}