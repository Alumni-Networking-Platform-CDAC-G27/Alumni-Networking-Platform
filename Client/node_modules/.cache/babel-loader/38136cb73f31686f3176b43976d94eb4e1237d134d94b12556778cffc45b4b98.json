{"ast":null,"code":"import { requester } from '../../infrastructure';\nimport { FETCH_ALLPOSTS_BEGIN, FETCH_ALLPOSTS_SUCCESS, FETCH_ALLPOSTS_ERROR, REMOVE_POST_BEGIN, REMOVE_POST_SUCCESS, REMOVE_POST_ERROR, ADDLIKE_POST_SUCCESS, ADDLIKE_POST_BEGIN, ADDLIKE_POST_ERROR, CREATE_POST_SUCCESS, CREATE_POST_BEGIN, CREATE_POST_ERROR } from './actionTypes';\n\n// createPost\nconst createPostSuccess = response => {\n  return {\n    type: CREATE_POST_SUCCESS,\n    payload: response\n  };\n};\nconst createPostBegin = () => {\n  return {\n    type: CREATE_POST_BEGIN\n  };\n};\nconst createPostError = (error, message, status, path) => {\n  return {\n    type: CREATE_POST_ERROR,\n    error,\n    message,\n    status,\n    path\n  };\n};\nconst createPostAction = (timelineUserId, loggedInUserId, content, imageUrl) => {\n  const requestBody = {\n    timelineUserId,\n    loggedInUserId,\n    content,\n    imageUrl\n  };\n  return dispatch => {\n    dispatch(createPostBegin());\n    return requester.post('/post/create', requestBody, response => {\n      if (response.error) {\n        const {\n          error,\n          message,\n          status,\n          path\n        } = response;\n        dispatch(createPostError(error, message, status, path));\n      } else {\n        dispatch(createPostSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(err => {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(createPostError('', `Error: ${err.message}`, err.status, ''));\n    });\n  };\n};\n\n// fetchAllPosts\nconst fetchAllPostsSuccess = allPostsArr => {\n  return {\n    type: FETCH_ALLPOSTS_SUCCESS,\n    payload: allPostsArr\n  };\n};\nconst fetchAllPostsBegin = () => {\n  return {\n    type: FETCH_ALLPOSTS_BEGIN\n  };\n};\nconst fetchAllPostsError = (error, message, status, path) => {\n  return {\n    type: FETCH_ALLPOSTS_ERROR,\n    error,\n    message,\n    status,\n    path\n  };\n};\nconst fetchAllPostsAction = userId => {\n  return dispatch => {\n    dispatch(fetchAllPostsBegin());\n    return requester.get('/post/all/' + userId, response => {\n      if (response.error) {\n        const {\n          error,\n          message,\n          status,\n          path\n        } = response;\n        dispatch(fetchAllPostsError(error, message, status, path));\n      } else {\n        dispatch(fetchAllPostsSuccess(response));\n      }\n    }).catch(err => {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(fetchAllPostsError('', `Error: ${err.message}`, err.status, ''));\n    });\n  };\n};\n\n// removePost\nconst removePostSuccess = response => {\n  return {\n    type: REMOVE_POST_SUCCESS,\n    payload: response\n  };\n};\nconst removePostBegin = () => {\n  return {\n    type: REMOVE_POST_BEGIN\n  };\n};\nconst removePostError = (error, message, status, path) => {\n  return {\n    type: REMOVE_POST_ERROR,\n    error,\n    message,\n    status,\n    path\n  };\n};\nconst removePostAction = (loggedInUserId, postToRemoveId, timelineUserId) => {\n  const requestBody = {\n    loggedInUserId,\n    postToRemoveId\n  };\n  return dispatch => {\n    dispatch(removePostBegin());\n    return requester.post('/post/remove', requestBody, response => {\n      if (response.error) {\n        const {\n          error,\n          message,\n          status,\n          path\n        } = response;\n        dispatch(removePostError(error, message, status, path));\n      } else {\n        dispatch(removePostSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(err => {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(removePostError('', `Error: ${err.message}`, err.status, ''));\n    });\n  };\n};\n\n// addLike\n\nconst addLikePostSuccess = response => {\n  return {\n    type: ADDLIKE_POST_SUCCESS,\n    payload: response\n  };\n};\nconst addLikePostBegin = () => {\n  return {\n    type: ADDLIKE_POST_BEGIN\n  };\n};\nconst addLikePostError = (error, message, status, path) => {\n  return {\n    type: ADDLIKE_POST_ERROR,\n    error,\n    message,\n    status,\n    path\n  };\n};\nconst addLikePostAction = (loggedInUserId, postId, timelineUserId) => {\n  const requestBody = {\n    postId,\n    loggedInUserId\n  };\n  return dispatch => {\n    dispatch(addLikePostBegin());\n    return requester.post('/like/add', requestBody, response => {\n      if (response.error) {\n        const {\n          error,\n          message,\n          status,\n          path\n        } = response;\n        dispatch(addLikePostError(error, message, status, path));\n      } else {\n        dispatch(addLikePostSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(err => {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n      dispatch(addLikePostError('', `Error: ${err.message}`, err.status, ''));\n    });\n  };\n};\nexport { createPostAction, fetchAllPostsAction, removePostAction, addLikePostAction };","map":{"version":3,"names":["requester","FETCH_ALLPOSTS_BEGIN","FETCH_ALLPOSTS_SUCCESS","FETCH_ALLPOSTS_ERROR","REMOVE_POST_BEGIN","REMOVE_POST_SUCCESS","REMOVE_POST_ERROR","ADDLIKE_POST_SUCCESS","ADDLIKE_POST_BEGIN","ADDLIKE_POST_ERROR","CREATE_POST_SUCCESS","CREATE_POST_BEGIN","CREATE_POST_ERROR","createPostSuccess","response","type","payload","createPostBegin","createPostError","error","message","status","path","createPostAction","timelineUserId","loggedInUserId","content","imageUrl","requestBody","dispatch","post","fetchAllPostsAction","catch","err","localStorage","clear","fetchAllPostsSuccess","allPostsArr","fetchAllPostsBegin","fetchAllPostsError","userId","get","removePostSuccess","removePostBegin","removePostError","removePostAction","postToRemoveId","addLikePostSuccess","addLikePostBegin","addLikePostError","addLikePostAction","postId"],"sources":["C:/Users/rijul/Downloads/Alumni/Alumani/Client/src/store/actions/postActions.js"],"sourcesContent":["import { requester } from '../../infrastructure';\nimport {\n    FETCH_ALLPOSTS_BEGIN, FETCH_ALLPOSTS_SUCCESS, FETCH_ALLPOSTS_ERROR,\n    REMOVE_POST_BEGIN, REMOVE_POST_SUCCESS, REMOVE_POST_ERROR,\n    ADDLIKE_POST_SUCCESS, ADDLIKE_POST_BEGIN, ADDLIKE_POST_ERROR,\n    CREATE_POST_SUCCESS, CREATE_POST_BEGIN, CREATE_POST_ERROR\n} from './actionTypes';\n\n// createPost\nconst createPostSuccess = (response) => {\n    return {\n        type: CREATE_POST_SUCCESS,\n        payload: response\n    }\n}\n\nconst createPostBegin = () => {\n    return {\n        type: CREATE_POST_BEGIN,\n    }\n}\n\nconst createPostError = (error, message, status, path) => {\n    return {\n        type: CREATE_POST_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst createPostAction = (timelineUserId, loggedInUserId, content, imageUrl) => {\n    const requestBody = { timelineUserId, loggedInUserId, content, imageUrl }\n    return (dispatch) => {\n        dispatch(createPostBegin())\n        return requester.post('/post/create', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(createPostError(error, message, status, path));\n            } else {\n                dispatch(createPostSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(createPostError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// fetchAllPosts\nconst fetchAllPostsSuccess = (allPostsArr) => {\n    return {\n        type: FETCH_ALLPOSTS_SUCCESS,\n        payload: allPostsArr\n    }\n}\n\nconst fetchAllPostsBegin = () => {\n    return {\n        type: FETCH_ALLPOSTS_BEGIN,\n    }\n}\n\nconst fetchAllPostsError = (error, message, status, path) => {\n    return {\n        type: FETCH_ALLPOSTS_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst fetchAllPostsAction = (userId) => {\n    return (dispatch) => {\n        dispatch(fetchAllPostsBegin())\n        return requester.get('/post/all/' + userId, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(fetchAllPostsError(error, message, status, path));\n            } else {\n                dispatch(fetchAllPostsSuccess(response));\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(fetchAllPostsError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// removePost\nconst removePostSuccess = (response) => {\n    return {\n        type: REMOVE_POST_SUCCESS,\n        payload: response\n    }\n}\n\nconst removePostBegin = () => {\n    return {\n        type: REMOVE_POST_BEGIN,\n    }\n}\n\nconst removePostError = (error, message, status, path) => {\n    return {\n        type: REMOVE_POST_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst removePostAction = (loggedInUserId, postToRemoveId, timelineUserId) => {\n    const requestBody = { loggedInUserId, postToRemoveId }\n    return (dispatch) => {\n        dispatch(removePostBegin())\n        return requester.post('/post/remove', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(removePostError(error, message, status, path));\n            } else {\n                dispatch(removePostSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(removePostError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// addLike\n\nconst addLikePostSuccess = (response) => {\n    return {\n        type: ADDLIKE_POST_SUCCESS,\n        payload: response\n    }\n}\n\nconst addLikePostBegin = () => {\n    return {\n        type: ADDLIKE_POST_BEGIN,\n    }\n}\n\nconst addLikePostError = (error, message, status, path) => {\n    return {\n        type: ADDLIKE_POST_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst addLikePostAction = (loggedInUserId, postId, timelineUserId) => {\n    const requestBody = { postId, loggedInUserId }\n    return (dispatch) => {\n        dispatch(addLikePostBegin())\n        return requester.post('/like/add', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(addLikePostError(error, message, status, path));\n            } else {\n                dispatch(addLikePostSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(addLikePostError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\nexport { createPostAction, fetchAllPostsAction, removePostAction, addLikePostAction, };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}